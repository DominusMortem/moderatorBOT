import asyncio
import random
import sqlite3
from contextlib import suppress
import logging
import re
import time
import datetime

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from telethon import TelegramClient, events
from aiogram import Bot, Dispatcher, executor, types
import aiogram.utils.markdown as fmt
from aiogram.utils import exceptions
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import (MessageCantBeDeleted, MessageToDeleteNotFound, RetryAfter, MessageCantBeEdited)
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import config
from database import Database
import utils
from permissions import is_admin, is_moder, is_owner, is_big_owner
from query import session, FlameNet, Main, Groups, Lottery, Banned, RPContext, Killer

range_tab = {'–û—á–µ–Ω—å –∑–ª–æ–π': range(-500, -300),
             '–ó–ª–æ–π': range(-300, -100),
             '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π': range(-100, 100),
             '–î–æ–±—Ä—ã–π': range(100, 300),
             '–û—á–µ–Ω—å –¥–æ–±—Ä—ã–π': range(300, 501)}
exp_tab = {
    0: ('–ü—Ä–µ—Å—Ç—É–ø–Ω–∏–∫', '–û–±–∏—Ç–∞—Ç–µ–ª—å', '–•—Ä–∞–Ω–∏—Ç–µ–ª—å'),
    200: ('–í–Ω–µ –∑–∞–∫–æ–Ω–∞', '–û—Ç—Å—Ç—É–ø–Ω–∏–∫', '–ú—É—á–µ–Ω–∏–∫'),
    550: ('–û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç', '–ò—Å–∫–∞—Ç–µ–ª—å', '–°—Ç—Ä–∞–∂'),
    1050: ('–ì—Ä–∞–±–∏—Ç–µ–ª—å', '–°—Ç—Ä–∞–Ω–Ω–∏–∫', '–ó–∞—â–∏—Ç–Ω–∏–∫'),
    1700: ('–¢–æ–ª—Å—Ç—ã–π –ö–æ—Ç', '–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω', '–ü–æ—á–µ—Ç–Ω—ã–π'),
    2500: ('–ú–∞—Ä–æ–¥–µ—Ä', '–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç', '–ú–∏—Ä–æ—Ç–≤–æ—Ä–µ—Ü'),
    3450: ('–ü–∏—Ä–∞—Ç', '–ë—Ä–æ–¥—è–≥–∞', '–†–µ–π–Ω–¥–∂–µ—Ä'),
    4550: ('–†–∞–∑–±–æ–π–Ω–∏–∫', '–ù–∞–µ–º–Ω–∏–∫', '–ó–∞—â–∏—Ç–Ω–∏–∫'),
    5800: ('–ó–∞—Ö–≤–∞—Ç—á–∏–∫', '–ì–æ—Ä–æ–¥—Å–∫–æ–π —Ä–µ–π–Ω–¥–∂–µ—Ä', '–ú—Å—Ç–∏—Ç–µ–ª—å'),
    7200: ('–ë–µ–∑–¥–µ–ª—å–Ω–∏–∫', '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å', '–û–±—Ä–∞–∑—Ü–æ–≤—ã–π'),
    8750: ('–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã–π –õ–æ—Ä–¥', '–°–æ–≤–µ—Ç–Ω–∏–∫', '–ö—Ä–µ—Å—Ç–æ–Ω–æ—Å–µ—Ü'),
    10450: ('–û—Å–∫–≤–µ—Ä–Ω–∏—Ç–µ–ª—å', '–•—Ä–∞–Ω–∏—Ç–µ–ª—å', '–ü–∞–ª–∞–¥–∏–Ω'),
    12300: ('–ë—É–≥–∏–º–µ–Ω', '–ü–æ—Ç–æ–º–æ–∫', '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'),
    14300: ('–ü–æ—Ö–∏—Ç–∏—Ç–µ–ª—å –¥—É—à', '–°—Ç—è–∂–∞—Ç–µ–ª—å –¥—É—à', '–°–≤–µ—Ç–æ–Ω–æ—Å–Ω—ã–π'),
    16450: ('–°–º–µ—Ä—Ç–Ω—ã–π –î—å—è–≤–æ–ª', '–ò—Å—Ç–∏–Ω–Ω—ã–π', '–ú–µ—Å—Å–∏—è')
}

logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()

db = Database('database.db')
bot = Bot(token=config.TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)


api_id = 15820816
api_hash = '3a9cf35550d971b31234d1c395a51b15'

client = TelegramClient('session_name', api_id, api_hash)

class Tagall(StatesGroup):
    func = State()

@client.on(events.NewMessage(chats=[1202181831, 1629215553, 1781348153, 1101450717]))
async def normal_handler(event):
    message = event.message.to_dict()
    chat_id = f"-100{message['peer_id']['channel_id']}"
    if message['from_id']['user_id']:
        group = utils.get_group(chat_id)
        if message['entities'] and '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞' in message['message'] and message['fwd_from'] is None:
            group.silent_mode = 0
            session.commit()
            if '–û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:' in message['message']:
                text = message['message'].partition('–û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:')[0]
                winners = list([x for _, x in re.findall(r'(\s{4}(.*?)\s-)', text)])
            elif '–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:' in message['message']:
                text = message['message'].partition('–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')[0]
                winners = list([x for _, x in re.findall(r'(\d.\s(.*?)\s-)', text)])
            else:
                text = message['message'].partition('–î—Ä—É–≥–∏–µ:')[0]
                winners = list([x for _, x in re.findall(r'(\d.\s.(.*?)\s-)', text)])
            entities = [entity for entity in message['entities'] if entity['_'] == 'MessageEntityMentionName']
            await work_group(winners, entities, chat_id)
        if message['entities']:
            if '—Å–ø–∞—Ç—å –≤–æ –≤—Ä–µ–º—è' in message['message']:
                for entity in message['entities']:
                    if entity['_'] == 'MessageEntityMentionName' and utils.user_exists(chat_id, entity['user_id']):
                        user = utils.get_user(chat_id, entity['user_id'])
                        await add_mute(chat_id, user.first_name, entity['user_id'], '30m', '–ê–§–ö')
                        await info_message(
                            '–ê–≤—Ç–æ–ê–§–ö –æ—Ç –±–æ—Ç–∞',
                            group.title,
                            chat_id,
                            dict(await bot.get_me()).get('first_name'),
                            dict(await bot.get_me()).get('id'),
                            user.first_name,
                            entity['user_id'],
                            dict(await bot.get_me()).get('username'),
                            None
                        )
            if '–Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª –≥–Ω–µ—Ç—É—â–µ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã' in message['message']:
                if group.pair_game:
                    return
                for entity in message['entities']:
                    if entity['_'] == 'MessageEntityMentionName' and utils.user_exists(chat_id, entity['user_id']):
                        user = utils.get_user(chat_id, entity['user_id'])
                        await add_mute(chat_id, user.first_name, entity['user_id'], '30m', '–í—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã')
                        await info_message(
                            '–ê–≤—Ç–æ–ª–∏–≤ –æ—Ç –±–æ—Ç–∞',
                            group.title,
                            chat_id,
                            dict(await bot.get_me()).get('first_name'),
                            dict(await bot.get_me()).get('id'),
                            user.first_name,
                            entity['user_id'],
                            dict(await bot.get_me()).get('username'),
                            None
                        )
        if '–ù–∞—Å—Ç—É–ø–∞–µ—Ç –Ω–æ—á—å' in message['message'] and not group.silent_mode:
            group.silent_mode = 1
            session.commit()
            await bot.send_message(chat_id, '–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã, –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–∞–≤!')
client.start()


TIMECHECK = {'–º': 60,
             'm': 60,
             'h': 3600,
             '—á': 3600}

GROUP = {}
box = ['üé∏–≥–∏—Ç–∞—Ä–∞',
       'üéÇ—Ç–æ—Ä—Ç',
       'üî™–Ω–æ–∂',
       'üí∞–∫–æ—Ç –≤ –º–µ—à–∫–µ',
       'üõ≥Ô∏è–Ø—Ö—Ç–∞',
       'üõ©Ô∏è–°–∞–º–æ–ª–µ—Ç',
       'üß≥–ß–µ–º–æ–¥–∞–Ω',
       'üîÆ–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä',
       'üé≥–ù–∞–±–æ—Ä –¥–ª—è –±–æ—É–ª–∏–Ω–≥–∞',
       'üéÉ–¢—ã–∫–≤–∞ –Ω–∞ –•–µ–ª–ª—É–∏–Ω',
       'üí¥–ü–∞—á–∫–∞ –¥–µ–Ω–µ–≥',
       'üßØ–û–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª—å',
       'üíç–ö–æ–ª—å—Ü–æ',
       'ü™í–ë—Ä–∏—Ç–≤–∞',
       'üßπ–ú–µ—Ç–ª–∞',]


async def try_delete(message):
    try:
        await message.delete()
        return
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    return


@dp.message_handler(commands=['q'])
async def q(message: types.Message):
    db.create_tables()
    await message.answer(f'–û–±–Ω–æ–≤–ª–µ–Ω–æ')


@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await try_delete(message)
    if not any([
        is_big_owner(message.from_user.id),
        is_owner(message.from_user.id),
        is_admin(message.chat.id, message.from_user.id),
        is_moder(message.chat.id, message.from_user.id)
    ]):
        text = ('–ö–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n'
                '<code>/info</code> - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n'
                '<code>/rp</code> - —Å–ø–∏—Å–æ–∫ RP –∫–æ–º–∞–Ω–¥ –≤ —á–∞—Ç–µ. –ö–æ–º–∞–Ω–¥—ã –≤–≤–æ–¥—è—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n'
                '<code>/—Å–≤–∞–¥—å–±–∞ (–Ω–∏–∫–Ω–µ–π–º)</code> - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–∞–¥—å–±—ã, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n'
                '<code>/—Ä–∞–∑–≤–æ–¥ (–Ω–∏–∫–Ω–µ–π–º)</code> - —Ä–∞–∑–≤–µ—Å—Ç–∏—Å—å, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n'
                '<code>/–±—Ä–∞–∫–∏</code> - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä –≤ —á–∞—Ç–µ.\n'
                '<code>/–∫–∞—Ä–º–∞</code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é –∫–∞—Ä–º—É.\n'
                '<code>/gift (—Å—É–º–º–∞)</code> - –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å —Å—É–º–º—É –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n'
                '<code>/money</code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n')
    else:
        text = (f'–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n'
                f'–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n'
                f'<code>/info (–Ω–∏–∫–Ω–µ–π–º) </code> - –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n\n'
                f'<code>/–∫–∞—Ä–º–∞ (–Ω–∏–∫–Ω–µ–π–º)</code> - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n'
                f'<code>/ban (–Ω–∏–∫–Ω–µ–π–º) (1/0)</code> - –ø–∞—Ä–∞–º–µ—Ç—Ä 1 –≤—ã–¥–∞–µ—Ç –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, 0 - —Å–Ω–∏–º–∞–µ—Ç.\n'
                f'<code>/menu (–Ω–∏–∫–Ω–µ–π–º) </code> - –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n'
                f'<code>/set_admin (–Ω–∏–∫–Ω–µ–π–º) (1/0)</code> - –ø–∞—Ä–∞–º–µ—Ç—Ä 1 –≤—ã–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, 0 - —Å–Ω–∏–º–∞–µ—Ç.\n'
                f'<code>/set_moder (–Ω–∏–∫–Ω–µ–π–º) (1/0)</code> - –ø–∞—Ä–∞–º–µ—Ç—Ä 1 –≤—ã–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, 0 - —Å–Ω–∏–º–∞–µ—Ç.\n'
                f'<code>/add_money (–Ω–∏–∫–Ω–µ–π–º) (–∫–æ–ª-–≤–æ)</code> - –¥–æ–±–∞–≤–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã.\n'
                f'<code>/mute (–Ω–∏–∫–Ω–µ–π–º) (–≤—Ä–µ–º—è) (–ø—Ä–∏—á–∏–Ω–∞) </code> - –¥–∞–µ—Ç –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —É–∫–∞–∑–∞–Ω–æ–µ –∫–æ–ª-–≤–æ –≤—Ä–µ–º–µ–Ω–∏\n'
                f'<code>/unmute (–Ω–∏–∫–Ω–µ–π–º)</code> - —Å–Ω–∏–º–∞–µ—Ç –º—É—Ç\n'
                f'<code>/talk (—Å–æ–æ–±—â–µ–Ω–∏–µ)</code> - –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞\n'
                f'<code>/black (id)</code> - –¥–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–∏\n'
                f'<code>/white (id)</code> - —É–¥–∞–ª–∏—Ç—å –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–µ—Ç–∏\n'
                f'<code>/–≤—ã–≥—Ä—É–∑–∏—Ç—å</code> - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–µ—Ç–∏\n'
                f'<code>/stats</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–µ\n'
                f'<code>/news</code> - –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ.\n'
                f'<code>/–ø—Ä–µ—Ñ</code> - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏, —É—á–∏—Ç—ã–≤–∞—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.\n'
                f'<code>/pair (on/off)</code> on - –≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–∞—Ä–Ω—ã—Ö –∏–≥—Ä, off - –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.\n'
                f'<code>/prefix (–Ω–∏–∫–Ω–µ–π–º) (–ø—Ä–∏—á–∏–Ω–∞)</code> - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ.\n'
                f'<code>/admins</code> - —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n')
    await message.answer(text)


@dp.message_handler(commands=['bot'])
async def bot_on(message: types.Message):
    await try_delete(message)
    text = message.text.split()
    if is_big_owner(message.from_user.id):
        return
    group = session.query(Groups).filter(Groups.group_id == message.chat.id).one_or_none()
    if text[1] == 'on':
        group.setka = 1
        session.commit()
        await message.answer('–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω')
    else:
        group.setka = 0
        session.commit()
        await message.answer('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')


@dp.message_handler(commands=['silent'])
async def silent(message: types.Message):
    await try_delete(message)
    group = session.query(Groups).filter(Groups.group_id == message.chat.id).one_or_none()
    group.silent_mode = 0
    session.commit()
    await message.answer('–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω!')


@dp.message_handler(commands='extermination')
async def extermination(message: types.Message):
    await try_delete(message)
    if not is_big_owner(message.from_user.id):
        return
    keyboard = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton('–î–∞', callback_data=f'ext_{message.from_user.id}'),
               types.InlineKeyboardButton('–ù–µ—Ç', callback_data='ext_cancel')]
    keyboard.add(*buttons)
    await message.answer('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –≤—Å–µ—Ö –≤ –≥—Ä—É–ø–ø–µ?', reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('ext_'))
async def exterm(callback_query: types.CallbackQuery):
    data = callback_query.data.split('_')
    if data[1] == 'cancel':
        await callback_query.message.delete()
    if int(data[1]) == callback_query.from_user.id:
        users = utils.get_users(callback_query.message.chat.id)
        for user in users:
            if user.user_id == callback_query.from_user.id:
                continue
            else:
                try:
                    await bot.ban_chat_member(callback_query.message.chat.id, user.user_id)
                except:
                    continue
        await callback_query.answer('–í—ã –∑–∞–±–∞–Ω–∏–ª–∏ –≤—Å–µ—Ö –≤ –≥—Ä—É–ø–ø–µ!!!', show_alert=True)
        await callback_query.message.delete()


@dp.message_handler(commands=['print'])
async def prints(message: types.Message):
    await try_delete(message)
    all = await client.get_participants(message.chat.id, limit=5000)
    count = 0
    noexist = []
    desactive = 0
    for person in all:
        if not utils.user_exists(message.chat.id, person.id):
            count += 1
            user = FlameNet(
                chat_id=message.chat.id,
                user_id=person.id,
                username=person.username,
                first_name=person.first_name,
                is_active=1,
                create_time=datetime.date.today(),
                first_message=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            )
            session.add(user)
            session.commit()
        noexist.append(person.id)
    for person in utils.get_users(message.chat.id):
        if person.user_id not in noexist:
            person.is_active=0
            session.commit()
            desactive += 1
    await message.answer(f'–î–æ–±–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {desactive}')


@dp.message_handler(commands=['check'])
async def check(message: types.Message):
    await try_delete(message)
    text = message.text.split()
    if len(text) == 1:
        user_id = text[1]
        data = utils.get_user(message.chat.id, user_id)
        if data:
            mes = (f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n'
                   f'ID: {data.user_id}\n'
                   f'Name: {data.username}')
        else:
            mes = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ.'
        await message.answer(mes)


@dp.message_handler(lambda message: message.chat.type in ['supergroup', 'group', 'channel'] and not utils.setka(message.chat.id))
async def t(message: types.Message):
    msg = await bot.get_chat_member(message.chat.id, dict(await bot.get_me()).get('id'))
    if msg.status == 'administrator':
        if dict(msg)['can_invite_users']:
            if dict(msg)['can_restrict_members']:
                if dict(msg)['can_manage_chat']:
                    if dict(msg)['can_promote_members']:
                        return
    await message.answer('–ú–Ω–µ –Ω—É–∂–Ω—ã –≤—Å–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã!')
    return


@dp.message_handler(commands=['–≤—ã–≥—Ä—É–∑–∏—Ç—å'])
async def all_stats(message: types.Message):
    await try_delete(message)
    text = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n'
    count = 0
    count_act = 0
    for group in utils.get_groups():
        if group.setka:
            users = utils.get_users(group.group_id)
            active = [user for user in users if user.is_active]
            count += len(users)
            count_act += len(active)
            text += (f'{group.title:}\n'
                     f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(users)}\n'
                     f'–ê–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active)}\n'
                     f'–ù–µ–∞–∫—Ç–∏–≤–Ω–æ (–≤—ã—à–ª–∏ —Å –≥—Ä—É–ø–ø—ã): {len(users) - len(active)}\n\n')
    text += (f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ—Ç–∏ –≤ –±–∞–∑–µ: {count}\n'
            f'–ê–∫—Ç–∏–≤–Ω–æ: {count_act}')
    await message.answer(text)


@dp.message_handler(commands=['—Ä–æ–∑—ã–≥—Ä—ã—à'])
async def lottery(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    if utils.salent(message.chat.id):
        await try_delete(message)
        return
    users = [user.user_id for user in utils.get_lottery(message.chat.id)]
    users.append(config.ADMIN_ID)
    if message.from_user.id not in users:
        return
    text = message.text.split()
    if len(text) >= 2:
        user_id, username, first_name = await ent(message)
        user = Lottery(
            user_id=user_id,
            first_name=first_name,
            chat_id=message.chat.id
        )
        session.add(user)
        session.commit()
        await message.answer(fmt.text(fmt.hlink(*await mention_text(first_name, user_id)), ' –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å–ø–æ—Ä—è–¥–∏—Ç–µ–ª–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞.'))
        return
    try:
        group = utils.get_group(message.chat.id)
        if group.serial_killer:
            await message.answer('–£–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ!')
        else:
            dates = datetime.datetime.now() + datetime.timedelta(minutes=10)
            group.time_serial=dates.strftime('%Y-%m-%d %H:%M:%S')
            group.serial_killer = 1
            group.lottery = 1
            session.commit()
            await message.answer('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –±—ã—Å—Ç—Ä—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')
    except Exception as e:
        logging.info(e)


@dp.message_handler(commands=['–∫—É—Ä—å–µ—Ä'])
async def cur(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    if utils.salent(message.chat.id):
        await try_delete(message)
        return
    text = message.text.split()
    try:
        group = utils.get_group(message.chat.id)
        if group.serial_killer:
            time_serial = datetime.datetime.strptime(group.time_serial, '%Y-%m-%d %H:%M:%S')
            await message.answer(f'–ö—É—Ä—å–µ—Ä –ø—Ä–∏–±—É–¥–µ—Ç –≤ {time_serial.strftime("%H:%M:%S")}')
        else:
            t = 1
            if len(text) == 2 and text[1].isdigit():
                t = int(text[1])
            dates = datetime.datetime.now() + datetime.timedelta(minutes=t)
            group.time_serial = dates.strftime('%Y-%m-%d %H:%M:%S')
            group.serial_killer = 1
            session.commit()
            await message.answer('–ö—É—Ä—å–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞ "–†–∞–Ω–¥–æ–º–Ω—ã–µ –±–µ–∑–¥–µ–ª—É—à–∫–∏" –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É. –°–∫–æ—Ä–æ –∫—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏—Ç –ø–æ—Å—ã–ª–∫—É.')
    except Exception as e:
        logging.info(e)


@dp.message_handler(commands=['–≤–µ—â–∏'])
async def items(message: types.Message):
    await try_delete(message)
    user = utils.get_user(message.chat.id, message.from_user.id)
    mention = await mention_text(message.from_user.first_name, message.from_user.id)
    if user.items == '0':
        text = '–ö—É—Ä—å–µ—Ä –µ—â–µ –Ω–µ –ø—Ä–∏–Ω–æ—Å–∏–ª –≤–∞–º –≤–µ—â–µ–π!'
    else:
        text = fmt.text(fmt.hlink(*mention), ' - –≤–æ—Ç –≤–∞—à–µ –∏–º—É—â–µ—Å—Ç–≤–æ:\n')
        items = [x.split(':') for x in [item for item in user.items.split(',')]]
        items_to_dict = {x: int(y) for x, y in items}
        for k, v in items_to_dict.items():
            text += f'{k} - {v} —à—Ç.\n'
    await message.answer(text)


@dp.message_handler(commands=['link'])
async def cmd_test(message: types.Message):
    await try_delete(message)
    link = await bot.create_chat_invite_link(-1001781348153)
    await message.answer(link.invite_link)


short_commands = ['–æ–±–Ω—è—Ç—å', '–∫–∞–∑–Ω–∏—Ç—å', '–ø–æ–±–∏—Ç—å', '–ª—é–±–æ–≤—å', '–Ω–µ–¥–æ–≤–µ—Ä–∏–µ', '—Ç—É—Å–∏—Ç—å', '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å', '—Ç–∞–Ω–µ—Ü', '—Ä—É–≥–∞—Ç—å',
                  '—Ü–≤–µ—Ç—ã', '—Å–ø–ª–µ—Ç–Ω–∏', '–≤–∑—è—Ç–∫–∞', '–∑–∞–∫–∞–∑–∞—Ç—å']
killer = ['–Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ —É–ª–µ—Ç–µ–ª —Å –∫—Ä—É—Ç–æ–≥–æ –æ–±—Ä—ã–≤–∞.',
          '—É–º–µ—Ä –≤–æ —Å–Ω–µ –æ—Ç —Å–µ—Ä–¥–µ—á–Ω–æ–π –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏',
          '–ø–æ–ø–∞–ª –ø–æ–¥ –ø–æ–µ–∑–¥ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏–∏',
          '—É–º–µ—Ä –æ—Ç —Å—É—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –ë—É–∑–æ–≤–æ–π',
          '—Å–±–∏—Ç –º–∞—à–∏–Ω–æ–π –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–µ',
          '–ø–æ–≥–∏–± –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –î–¢–ü —Å —É—á–∞—Å—Ç–∏–µ–º –±–µ–Ω–∑–æ–≤–æ–∑–∞ –∏ –ª–µ—Å–æ–≤–æ–∑–∞',
          '–º–∏—Å—Ç–µ—Ä C–∞–ª—å–µ—Ä–∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –í–∞–º –ø—Ä–∏–≤–µ—Ç...',
          '–≤—ã–ø–∞–ª —Å —Ñ—É–Ω–∏–∫—É–ª–µ—Ä–∞',
          '–æ—Ç—Ä–∞–≤–∏–ª—Å—è –≥–∞–∑–∏—Ä–æ–≤–∫–æ–π',
          '—Å–æ–∂–≥–ª–∏ –Ω–∞ –∫–æ—Å—Ç—Ä–µ –∏–Ω–∫–≤–∏–∑–∏—Ü–∏–∏',
          '—É—Å–Ω—É–ª –≤ –∫–ª–µ—Ç–∫–µ —Å —Ç–∏–≥—Ä–æ–º']


@dp.message_handler(commands=['news'])
async def news(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    await message.answer('‚ö†–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –Ω–∞ 13.07.22:\n'
                         '–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π. –ü–æ –∫–æ–º–∞–Ω–¥–µ /–ª–æ—Ç–µ—Ä–µ—è, –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à.'
                         '–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏—à—å –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º –≤ —á–∞—Ç–µ. –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏'
                         ' 25 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ 10 –º–∏–Ω—É—Ç. –ü–æ–±–µ–∂–¥–∞—é—Ç 5 —á–µ–ª–æ–≤–µ–∫, –Ω–∞–≥—Ä–∞–¥–∞ 3 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ')


@dp.message_handler(commands=['talk'])
async def talk(message: types.Message):
    await try_delete(message)
    if any([
        is_big_owner(message.from_user.id),
        is_owner(message.from_user.id),
        is_admin(message.chat.id, message.from_user.id),
    ]):
        await message.answer(message.text[5:])


@dp.message_handler(commands=['black'])
async def black(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    text = message.text.split()
    if not any([
        is_big_owner(message.from_user.id),
        is_owner(message.from_user.id),
        is_admin(message.chat.id, message.from_user.id),
        is_moder(message.chat.id, message.from_user.id)
    ]):
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        return
    if is_owner(text[1]):
        await message.answer('–ù–µ–ª—å–∑—è –±–∞–Ω–∏—Ç—å —Å–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–≤!')
        return
    try:
        if session.query(Banned).filter(Banned.user_id == text[1]).one_or_none():
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!')
            return
        mention = await mention_text('Username', text[1])
        await banned(text[1], 0, mention)
        await message.answer(f'ID {text[1]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–∏!')
        await info_message(
            'black',
            message.chat.title,
            message.chat.id,
            message.from_user.first_name,
            message.from_user.id,
            None,
            text[1],
            message.from_user.username,
            None
        )
    except Exception as e:
        logging.info(e)


@dp.message_handler(commands=['white'])
async def white(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    text = message.text.split()
    if not any([
        is_big_owner(message.from_user.id),
        is_owner(message.from_user.id),
        is_admin(message.chat.id, message.from_user.id),
        is_moder(message.chat.id, message.from_user.id)
    ]):
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        return
    try:

        mention = await mention_text('Username', text[1])
        await unbanned(text[1], 0, mention)
        await message.answer(f'ID {text[1]} —É–±—Ä–∞–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–µ—Ç–∏!')
        await info_message(
            'white',
            message.chat.title,
            message.chat.id,
            message.from_user.first_name,
            message.from_user.id,
            None,
            text[1],
            message.from_user.username,
            None
        )
    except Exception as e:
        logging.info(e)


@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    big_owner = is_big_owner(message.from_user.id)
    owner = is_owner(message.from_user.id)
    admin = is_admin(message.chat.id, message.from_user.id)
    moder = is_moder(message.chat.id, message.from_user.id)
    try:
        if not any([
            big_owner,
            owner,
            admin,
            moder
        ]):
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
            return
        if len(message.text.split()) == 1:
            if not message.reply_to_message:
                await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
                return
            user_id = message.reply_to_message.from_user.id
            username = message.reply_to_message.from_user.username
            first_name = message.reply_to_message.from_user.first_name
        else:
            user_id, username, first_name = await ent(message)
        keyboard = types.InlineKeyboardMarkup()
        buttons = []
        owner_user = is_owner(user_id)
        admin_user = is_admin(message.chat.id, user_id)
        moder_user = is_moder(message.chat.id, user_id)
        if user_id == config.ADMIN_ID:
            await message.answer('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞!')
            return
        if any([admin, moder]) and owner_user:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
            return
        if moder and any([owner_user, admin_user, moder_user]):
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
            return
        adm = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        if owner:
            adm = fmt.text(f'–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü {message.from_user.first_name}')
        if admin:
            adm = fmt.text(f'–ê–¥–º–∏–Ω {message.from_user.first_name}')
        if moder:
            adm = fmt.text(f'–ú–æ–¥–µ—Ä {message.from_user.first_name}')
        if big_owner:
            adm = fmt.text(f'–í–ª–∞–¥–µ–ª–µ—Ü {message.from_user.first_name}')
            buttons.append(types.InlineKeyboardButton('–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü',
                                                      callback_data=f'menu_owner_{user_id}_{message.from_user.id}'))
        if any([big_owner, owner]):
            buttons.append(types.InlineKeyboardButton('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                                                      callback_data=f'menu_admin_{user_id}_{message.from_user.id}'))
            buttons.append(types.InlineKeyboardButton('–†–∞–∑–±–∞–Ω –ø–æ —Å–µ—Ç–∏',
                                                      callback_data=f'menu_unbanned_{user_id}_{message.from_user.id}'))
        if any([big_owner, owner, admin]):
            buttons.append(types.InlineKeyboardButton('–ë–∞–Ω –ø–æ —Å–µ—Ç–∏',
                                                      callback_data=f'menu_banned_{user_id}_{message.from_user.id}'))
            buttons.append(types.InlineKeyboardButton('–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä',
                                                      callback_data=f'menu_moder_{user_id}_{message.from_user.id}'))
            buttons.append(types.InlineKeyboardButton('–ü–æ–Ω–∏–∑–∏—Ç—å',
                                                      callback_data=f'menu_down_{user_id}_{message.from_user.id}'))
        if any([big_owner, owner, admin, moder]):
            buttons.append(types.InlineKeyboardButton('–ó–∞–±–∞–Ω–∏—Ç—å',
                                                      callback_data=f'menu_ban_{user_id}_{message.from_user.id}'))
            buttons.append(types.InlineKeyboardButton('–†–∞–∑–±–∞–Ω–∏—Ç—å',
                                                      callback_data=f'menu_unban_{user_id}_{message.from_user.id}'))
            buttons.append(types.InlineKeyboardButton('RP –∫–æ–º–∞–Ω–¥—ã',
                                                      callback_data=f'menu_userrp_{user_id}_{message.from_user.id}'))
            buttons.append(types.InlineKeyboardButton('–ó–∞–∫—Ä—ã—Ç—å',
                                                      callback_data=f'menu_close_{user_id}_{message.from_user.id}'))

        keyboard.add(*buttons)
        msg = await message.answer(fmt.text(
            f'–î–∞–Ω–Ω—ã–µ –æ —á–µ–ª–æ–≤–µ–∫–µ: \n'
            f'–ö–æ–º–∞–Ω–¥—É –≤—ã–∑–≤–∞–ª - {adm}\n'
            f'ID - {user_id}\n'
            f'Username - {username}\n'
            f'First Name - {first_name}'), reply_markup=keyboard)
        asyncio.create_task(delete_message(msg, 20))
    except Exception as e:
        logging.info(e)


@dp.callback_query_handler(lambda c: c.data.startswith('menu_'))
async def ban_key(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    _, com, to_user, from_user = callback_query.data.split('_')
    user = utils.get_user(callback_query.message.chat.id, to_user)
    mention = await mention_text(user.first_name, to_user)
    if callback_query.from_user.id == int(from_user):
        if com == 'close':
            await callback_query.message.delete()
            return
        await DICT_COMMANDS[com](to_user, callback_query.message.chat.id, mention, callback_query.from_user.id)


async def user_rp(user_id, chat_id, mention, user=0):
    coms = utils.get_user_rp(user_id=user_id)
    buttons = []
    for com in coms:
        buttons.append(types.InlineKeyboardButton(f'{com.id} -{com.com} - {com.desc}', callback_data=f'deladm_{com.id}_{user}_{user_id}'))
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(*buttons)
    keyboard.add(types.InlineKeyboardButton(f'–ó–∞–∫—Ä—ã—Ç—å', callback_data=f'deladm_close_{user}_{user_id}'))
    msg = await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=keyboard)
    asyncio.create_task(delete_message(msg,20))


@dp.callback_query_handler(lambda c: 'deladm_' in c.data)
async def call_user_rp(callback_query: types.CallbackQuery):
    _, rp_id, from_user, to_user = callback_query.data.split('_')
    if callback_query.from_user.id == int(from_user):
        if rp_id == 'close':
            await callback_query.message.delete()
            return
        session.query(RPContext).filter(RPContext.id == rp_id).delete()
        session.commit()
        await callback_query.message.delete()
        await user_rp(to_user, callback_query.message.chat.id, None, from_user)
    await callback_query.answer()



async def downgrade(user_id, chat_id, mention, user=0):
    owner = is_owner(user_id)
    admin = is_admin(chat_id, user_id)
    moder = is_moder(chat_id, user_id)
    if owner:
        for group in utils.get_groups():
            if utils.user_exists(group.group_id, user_id):
                await admin_up(user_id, group.group_id, mention)
        return '–ü–æ–Ω–∏–∂–µ–Ω–æ!'
    elif admin:
        await moder_up(user_id, chat_id, mention)
        return '–ü–æ–Ω–∏–∂–µ–Ω–æ!'
    elif moder:
        await moder_down(user_id, chat_id, mention)
        return '–ü–æ–Ω–∏–∂–µ–Ω–æ!'
    else:
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!'


async def admin_up(user_id, chat_id, mention, user=0):
    session.query(Main).filter(Main.owner_id == user_id).delete()
    user = session.query(FlameNet).filter(FlameNet.user_id == user_id, FlameNet.chat_id == chat_id).one_or_none()
    user.is_admin = 1
    user.is_moder = 0
    session.commit()
    await bot.promote_chat_member(
        chat_id,
        user_id,
        can_manage_chat=True,
        can_delete_messages=True,
        can_restrict_members=True
    )
    await asyncio.sleep(1)
    await bot.set_chat_administrator_custom_title(chat_id, user_id, custom_title='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
    await bot.send_message(chat_id, fmt.text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ',fmt.hlink(*mention),' –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.'))


async def admin_down(user_id, chat_id, mention, user=0):
    session.query(Main).filter(Main.owner_id == user_id).delete()
    user = session.query(FlameNet).filter(FlameNet.user_id == user_id, FlameNet.chat_id == chat_id).one_or_none()
    user.is_admin = 0
    user.is_moder = 0
    session.commit()
    await bot.promote_chat_member(
        chat_id, user_id
    )
    await bot.send_message(chat_id, fmt.text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ', fmt.hlink(*mention), ' —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'))


async def moder_up(user_id, chat_id, mention, user=0):
    session.query(Main).filter(Main.owner_id == user_id).delete()
    user = session.query(FlameNet).filter(FlameNet.user_id == user_id, FlameNet.chat_id == chat_id).one_or_none()
    user.is_admin = 0
    user.is_moder = 1
    session.commit()
    await bot.promote_chat_member(
        chat_id,
        user_id,
        can_manage_chat=True
    )
    await asyncio.sleep(1)
    await bot.set_chat_administrator_custom_title(chat_id, user_id, custom_title='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä')
    await bot.send_message(chat_id, fmt.text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ', fmt.hlink(*mention), '–Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.'))
    return '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!'


async def moder_down(user_id, chat_id, mention, user=0):
    session.query(Main).filter(Main.owner_id == user_id).delete()
    user = session.query(FlameNet).filter(FlameNet.user_id == user_id, FlameNet.chat_id == chat_id).one_or_none()
    user.is_admin = 0
    user.is_moder = 0
    session.commit()
    await bot.promote_chat_member(
        chat_id, user_id
    )
    await bot.send_message(chat_id, fmt.text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ', fmt.hlink(*mention),' —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.'))


async def unban_group(user_id, chat_id, mention, user=0):
    user = session.query(FlameNet).filter(FlameNet.user_id == user_id, FlameNet.chat_id == chat_id).one_or_none()
    user.ban = 0
    session.commit()
    await bot.unban_chat_member(chat_id, user_id, only_if_banned=True)
    await bot.send_message(chat_id, fmt.text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ', fmt.hlink(*mention), ' —Ä–∞–∑–±–∞–Ω–µ–Ω.'))
    return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω!'


async def ban_group(user_id, chat_id, mention, user=0):
    user = session.query(FlameNet).filter(FlameNet.user_id == user_id, FlameNet.chat_id == chat_id).one_or_none()
    user.ban = 1
    session.commit()
    await bot.ban_chat_member(chat_id, user_id)
    await bot.send_message(chat_id, fmt.text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ', fmt.hlink(*mention), ' –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.'))
    return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!'


async def add_owner(user_id, chat_id, mention, user=0):
    if not is_big_owner(user):
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!'
    if not utils.owner_exists(user_id):
        user = Main(owner_id=user_id)
        session.add(user)
        session.commit()
    for group in utils.get_groups():
        if utils.user_exists(group.group_id, user_id):
            user = session.query(FlameNet).filter(FlameNet.user_id == user_id, FlameNet.chat_id == chat_id).one_or_none()
            user.is_admin = 0
            user.is_moder = 0
            session.commit()
            await bot.promote_chat_member(
                group.group_id,
                user_id,
                can_manage_chat=True,
                can_delete_messages=True,
                can_restrict_members=True,
                can_promote_members=True,
                can_change_info=True,
                can_invite_users=True,
                can_pin_messages=True,
                can_manage_video_chats=True
            )
            await asyncio.sleep(1)
            await bot.set_chat_administrator_custom_title(group.group_id, user_id, custom_title='–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü')
            await bot.send_message(group.group_id, fmt.text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ', fmt.hlink(*mention), ' –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Ç–∏!'))


async def banned(user_id, chat_id, mention, user=0):
    if not utils.banned_exists(user_id):
        baned = Banned(user_id=user_id, desc='–î–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫')
        session.add(baned)
        session.commit()
    try:
        for group in utils.get_groups():
            if utils.user_exists(group.group_id, user_id):
                if any([is_owner(user_id), is_admin(group.group_id, user_id), is_moder(group.group_id, user_id)]):
                    await bot.send_message(group.group_id, '–ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!')
                    return
                await bot.ban_chat_member(group.group_id, user_id)
                await bot.send_message(group.group_id,
                                       fmt.text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ', fmt.hlink(*mention), ' –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ —Å–µ—Ç–∏.'))
    except Exception as e:
        print(e)


async def unbanned(user_id, chat_id, mention, user=0):
    session.query(Banned).filter(Banned.user_id == user_id).delete()
    session.commit()
    for group in utils.get_groups():
        if utils.user_exists(group.group_id, user_id):
            await bot.unban_chat_member(group.group_id, user_id)
            await bot.send_message(group.group_id,
                                   fmt.text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ', fmt.hlink(*mention), ' —Ä–∞–∑–±–∞–Ω–µ–Ω.\n'))


@dp.message_handler(commands=['–ø—Ä–µ—Ñ'])
async def pref(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    if not any([
        is_big_owner(message.from_user.id),
        is_owner(message.from_user.id),
        is_admin(message.chat.id, message.from_user.id),
        is_moder(message.chat.id, message.from_user.id)
    ]):
        return
    msg = await bot.get_chat_administrators(message.chat.id)
    await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: {len(msg)}\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 50')
    text = ''
    for user in msg:
        mention = await mention_text(user.user.first_name, user.user.id)
        text += fmt.text(fmt.hlink(*mention), ' - ', user.custom_title, '\n')
    msg = await message.answer(text)
    asyncio.create_task(delete_message(msg, 5))


@dp.message_handler(lambda m: m.text.lower() in [i.com.lower() for i in utils.get_rp()])
async def command(message: types.Message):
    if message.chat.type == 'private':
        return
    if utils.salent(message.chat.id):
        await try_delete(message)
        return
    if not message.reply_to_message:
        return
    mention = await mention_text(message.from_user.first_name, message.from_user.id)
    if utils.get_vip(message.from_user.id):
        await message.answer(fmt.text(fmt.hlink(*mention), '–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è VIP –∏—Å—Ç–µ–∫!'))
        return
    person_one = await mention_text(message.from_user.first_name, message.from_user.id)
    person_two = await mention_text(message.reply_to_message.from_user.first_name,
                                      message.reply_to_message.from_user.id)
    if utils.check_rp(com=message.text.lower(), user_id=message.from_user.id):
        rp = utils.get_com_rp(message.text.lower(), message.from_user.id)
        if not rp:
            return
    else:
        rp = utils.get_com_rp(message.text.lower(), 0)
        if not rp:
            return
    if rp.prefix:
        pref = f'{rp.prefix}| '
    else:
        pref = ''
    await message.answer(f'{pref}{fmt.hlink(*person_one)} {rp.desc} {fmt.hlink(*person_two)}')


"""@dp.message_handler(content_types=types.ContentTypes.ANIMATION)
async def content_type_gif(msg: types.Message):
    if not db.get_gif()[0]:
        await msg.delete()"""


@dp.message_handler(commands=['RP'])
async def rp_all(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    if utils.get_group(message.chat.id).silent_mode:
        return
    text = '–î–æ—Å—Ç—É–ø–Ω—ã–µ RP –∫–æ–º–∞–Ω–¥—ã:\n\n'
    count = 0
    for rp in utils.get_rp():
        text += (f'<code>{rp.com}</code> ')
        count += 1
        if count == 3:
            count = 0
            text += '\n'
    if text[-1] != '\n':
        text += '\n'
    text += '<code>–∑–∞–∫–∞–∑–∞—Ç—å</code>\n–ö–æ–º–∞–Ω–¥–∞ –ø–∏—à–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
    msg = await message.answer(text)
    asyncio.create_task(delete_message(msg, 10))


@dp.message_handler(commands=['pair'])
async def pair_game(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    mes = message.text.split()
    if not any([
        is_big_owner(message.from_user.id),
        is_owner(message.from_user.id),
        is_admin(message.chat.id, message.from_user.id),
        is_moder(message.chat.id, message.from_user.id)
    ]):
        return
    group = utils.get_group(message.chat.id)
    if len(mes) == 2 and mes[1] == 'on':
        group.pair_game = 1
        session.commit()
        text = '–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø–∞—Ä–Ω—ã—Ö –∏–≥—Ä. –ê–≤—Ç–æ–Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ –ª–∏–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ. –ù–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ –ª–∏–≤ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.'
    else:
        group.pair_game = 0
        session.commit()
        text = '–†–µ–∂–∏–º –ø–∞—Ä–Ω—ã—Ö –∏–≥—Ä –æ—Ç–∫–ª—é—á–µ–Ω. –ê–≤—Ç–æ–Ω–∞–∫–∞–∑–∞–Ω–∏–µ –∑–∞ –ª–∏–≤ –≤–∫–ª—é—á–µ–Ω–æ. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã.'
    msg = await message.answer(text)
    asyncio.create_task(delete_message(msg, 10))
    await info_message(
        '–ø–∞—Ä–Ω—ã–µ –∏–≥—Ä—ã',
        message.chat.title,
        message.chat.id,
        message.from_user.first_name,
        message.from_user.id,
        message.from_user.first_name,
        message.from_user.id,
        message.from_user.username,
        message.from_user.username
    )
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass


async def work_group(winners, entities, chat_id):
    if winners:
        text_winners = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!\n'
        count = 1
        for entity in entities[:len(winners)]:
            if db.user_exists(chat_id, entity['user_id']):
                money = db.get_money_game()[0]
                db.add_money(chat_id, entity['user_id'], money)
                mention = await mention_text(db.get_username(chat_id, entity['user_id'])[0],
                                               entity['user_id'])
                text_winners += fmt.text(count, ') ', fmt.hlink(*mention), ' - ', money, ' ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n')
                count += 1
                await info_message(
                    '–ê–≤—Ç–æ–Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞',
                    db.get_chat_title(chat_id),
                    chat_id,
                    dict(await bot.get_me()).get('first_name'),
                    dict(await bot.get_me()).get('id'),
                    db.get_username(chat_id, entity['user_id'])[0],
                    entity['user_id'],
                    dict(await bot.get_me()).get('username'),
                    None
                )
        await bot.send_message(chat_id, text_winners)
        await bot.send_message(chat_id, '–í—ã–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã, –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã!')


async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()


async def mention_text_2(first_name, user_id):
    if '<' in first_name:
        first_name = ''.join(first_name.split('<'))
    if '>' in first_name:
        first_name = ''.join(first_name.split('>'))
    if '&' in first_name:
        first_name = ''.join(first_name.split('&'))
    return f'<a href = "tg://user?id={user_id}">{first_name}</a>'


async def mention_text(first_name, user_id):
    return first_name, f'tg://user?id={user_id}'


async def ent(message: types.Message):
    ents = [entity for entity in message.entities if entity.type == 'text_mention']
    if ents:
        first_name = ents[0].user.first_name
        user_id = ents[0].user.id
        username = ents[0].user.username
    else:
        username = message.text.split()[1]
        user_id, first_name = db.get_user(message.chat.id, username[1:])
        username = username[1:]
    return user_id, first_name, username


async def info_message(
        command,
        chat_title,
        chat_id,
        first_name,
        user_id,
        to_first_name,
        to_user_id,
        username=None,
        to_username=None
):
    text = fmt.text(
        f'#{command}\n\n'
        f'–ì—Ä—É–ø–ø–∞: {chat_title}\n'
        f'[#chat{str(chat_id)[1:]}]\n'
        f'–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {fmt.quote_html(first_name)} [{username or "–ù–µ –∑–∞–¥–∞–Ω–æ"}]\n'
        f'[#user{user_id}]\n'
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {fmt.quote_html(to_first_name)} [{to_username or "–ù–µ –∑–∞–¥–∞–Ω–æ"}]\n'
        f'[#user{to_user_id}]\n'
        f'–í—Ä–µ–º—è: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
    group_id = utils.get_setting().id_group_log
    await bot.send_message(group_id, text)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type == 'private':
        buttons = ['–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω',
                   '–ö—É–ø–∏—Ç—å —Ä–∞–∑–≤–∞—Ä–Ω',
                   '–ö—É–ø–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å',
                   '–ö—É–ø–∏—Ç—å ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ']
        if utils.check_vip(message.from_user.id):
            buttons.append('VIP RP –∫–æ–º–∞–Ω–¥–∞')
        else:
            buttons.append('–ö—É–ø–∏—Ç—å VIP')
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*buttons)
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n'
                             '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:\n'
                             '–†–∞–∑–±–∞–Ω —Å–Ω–∏–º–∞–µ—Ç –±–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ.\n'
                             '–¶–µ–Ω–∞ —Ä–∞–∑–±–∞–Ω–∞ - 200 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n\n'
                             '–†–∞–∑–≤–∞—Ä–Ω —Å–Ω–∏–º–∞–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–µ.\n'
                             '–¶–µ–Ω–∞ —Ä–∞–∑–≤–∞—Ä–Ω–∞ - 150 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n\n'
                             '–ö—É–ø–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å:\n–Ω–∞ 3 –¥–Ω—è - 50 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n'
                             '–Ω–∞ –Ω–µ–¥–µ–ª—é - 100 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n\n'
                             '–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å VIP.\n'
                             '–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏ - 300 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ. –°—Ä–æ–∫ - 1 –º–µ—Å—è—Ü.\n\n'
                             f'–í–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ - {utils.get_money(message.from_user.id)} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n'
                             '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é:', reply_markup=keyboard)
    else:
        await message.delete()
        return


@dp.message_handler(commands=['stats'])
async def stats(message: types.Message):
    if message.chat.type == 'private':
        return
    await try_delete(message)
    if not any([
        is_big_owner(message.from_user.id),
        is_owner(message.from_user.id),
        is_admin(message.chat.id, message.from_user.id),
        is_moder(message.chat.id, message.from_user.id)
    ]):
        return
    users = utils.get_users(message.chat.id)
    date_create = users[0].create_time
    user_in_db = len(users)
    user_active = len([user for user in users if user.is_active])
    count_message = sum([user.count_message for user in users])
    max_message = max([(user.count_message, user.user_id, user.first_name) for user in users])
    mention_max = await mention_text(max_message[2], max_message[1])
    min_message = min([(user.count_message, user.user_id, user.first_name) for user in users])
    mention_min = await mention_text(min_message[2], min_message[1])
    wedding = len([user.wedding for user in users if user.wedding != '0']) // 2
    cash = sum([user.cash for user in users])
    max_cash = max([(user.cash, user.user_id, user.first_name) for user in users])
    mention_cash = await mention_text(max_cash[2], max_cash[1])
    min_cash = min([(user.cash, user.user_id, user.first_name) for user in users])
    mention_cash_min = await mention_text(min_cash[2], min_cash[1])
    mute_max = max([(user.mute, user.user_id, user.first_name) for user in users])
    mention_mute = await mention_text(mute_max[2], mute_max[1])
    text = fmt.text(
        f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ —Å {date_create}:\n\n',
        f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_in_db}\n',
        f'–ê–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_active}\n',
        f'–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count_message}\n',
        f'–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —É ',
        fmt.hlink(*mention_max),
        f' - {max_message[0]}\n',
        f'–ú–µ–Ω—å—à–µ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π —É ',
        fmt.hlink(*mention_min),
        f' - {min_message[0]}\n',
        f'–ü–∞—Ä –≤ —á–∞—Ç–µ - {wedding}\n',
        f'–í—Å–µ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —á–∞—Ç–µ: {cash} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n',
        f'–°–∞–º—ã–π –±–æ–≥–∞—Ç—ã–π: ',
        fmt.hlink(*mention_cash),
        f' - {max_cash[0]} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n',
        f'–°–∞–º—ã–π –±–µ–¥–Ω—ã–π: ',
        fmt.hlink(*mention_cash_min),
        f'- {min_cash[0]} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n',
        f'–°–∞–º—ã–π –∑–ª–æ—Å—Ç–Ω—ã–π –Ω–∞—Ä—É—à–∏—Ç–µ–ª—å: ',
        fmt.hlink(*mention_mute),
        f'- {mute_max[0]} –Ω–∞—Ä—É—à–µ–Ω–∏–π\n'
    )
    await message.answer(text)


@dp.message_handler(commands=['–±—Ä–∞–∫–∏'])
async def get_pair_2(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    if utils.salent(message.chat.id):
        return
    dict_pair = {}
    pairs = db.get_pair(message.chat.id)
    if pairs:
        for pair in pairs:
            if pair[2] != '0':
                user_id = str(pair[0])
                first_name = pair[1]
                wend = pair[2]
                wedding_time = datetime.datetime.strptime(pair[3], "%Y-%m-%d %H:%M:%S")
                wedding_id = pair[2].split('id=')[1].split('"')[0]
                if wedding_id not in dict_pair:
                    dict_pair[user_id] = (wend, first_name, wedding_time)
        if dict_pair:
            text = f'–í—Å–µ–≥–æ –ø–∞—Ä –≤ {message.chat.title} - {len(dict_pair)}:\n'
            dict_pair = {k: v for k, v in sorted(dict_pair.items(), key=lambda item: item[1][2])}
        else:
            text = '–õ—é–¥–µ–π –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–∞–∫ –º–∞–ª–æ, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ó–ê–ì–° –∑–∞–∫–æ–ª–æ—Ç–∏–ª –¥–≤–µ—Ä–∏...'
        count = 1
        for k, v in dict_pair.items():
            mention = await mention_text(v[1], k)
            day_wending = (datetime.datetime.now() - v[2]).total_seconds()
            text += fmt.text(fmt.text(count), ') ', fmt.hlink(*mention), f' –∏ {v[0]} –≤ –±—Ä–∞–∫–µ: {utils.wedding_date_now(day_wending)}.\n')
            count += 1
        await message.answer(text)
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    return


@dp.message_handler(commands=['—Å–≤–∞–¥—å–±–∞'])
async def wedding(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    if utils.salent(message.chat.id):
        return
    text = message.text.split()
    if len(text) == 1:
        if not message.reply_to_message:
            await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
            return
        user_id = message.reply_to_message.from_user.id
        first_name = message.reply_to_message.from_user.first_name
        username = message.reply_to_message.from_user.username
    else:
        user_id, first_name, username = await ent(message)
    if user_id == message.from_user.id:
        await message.answer('–í –Ω–∞—à–µ–º –º–∏—Ä–µ –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–º —Å–µ–±–µ!')
        return
    mention = await mention_text_2(first_name, user_id)
    mention_one = await mention_text_2(message.from_user.first_name, message.from_user.id)
    keyboard = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton('–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data='YES'),
               types.InlineKeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å', callback_data='NO')]
    keyboard.add(*buttons)
    if not db.user_exists(message.chat.id, user_id):
        db.add_user(message.chat.id, user_id, username, first_name,
                    1)
    if not db.user_exists(message.chat.id, message.from_user.id):
        db.add_user(message.chat.id, message.from_user.id, message.from_user.username, message.from_user.first_name,
                    1)
    db.delete_constant(user_id)
    db.wedding_constaint(message.chat.id, message.from_user.first_name, message.from_user.id, first_name, user_id)
    person_one_not_wending = db.get_wedding(message.chat.id, message.from_user.id)[0]
    person_two_not_wending = db.get_wedding(message.chat.id, user_id)[0]
    if person_one_not_wending == '0' and person_two_not_wending == '0':
        msg = await message.answer(f'üíó{mention}, –º–∏–Ω—É—Ç—É –≤–Ω–∏–º–∞–Ω–∏—è!\n'
                                   f'{mention_one} —Å–¥–µ–ª–∞–ª(–∞) –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞.ü•∞',
                                   reply_markup=keyboard)
        asyncio.create_task(delete_message(msg, 120))
    else:
        db.delete_constant(user_id)
        if person_one_not_wending != '0':
            msg = await message.answer(f'–£–≤—ã, {mention_one}, –≤—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ!')
            asyncio.create_task(delete_message(msg, 3))
        if person_two_not_wending != '0':
            msg = await message.answer(f'–£–≤—ã, {mention}, —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –±—Ä–∞–∫–µ!')
            asyncio.create_task(delete_message(msg, 3))
    to_username = db.get_username(message.chat.id, user_id)[0]
    await info_message(
        '—Å–≤–∞–¥—å–±–∞',
        message.chat.title,
        message.chat.id,
        message.from_user.first_name,
        message.from_user.id,
        first_name,
        user_id,
        message.from_user.username,
        to_username
    )
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    return


@dp.message_handler(commands=['—Ä–∞–∑–≤–æ–¥'])
async def no_marry(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    if utils.salent(message.chat.id):
        return
    wedding = db.get_wedding(message.chat.id, message.from_user.id)[0]
    if wedding != '0':
        mention = await mention_text_2(message.from_user.first_name, message.from_user.id)
        person_two = wedding.split('id=')[1].split('"')[0]
        db.wedding(message.chat.id, message.from_user.id, '0')
        db.wedding(message.chat.id, int(person_two), '0')
        msg = await message.answer(f'üíî–°–æ–∂–∞–ª–µ–µ–º {wedding}, {mention} —Ä–µ—à–∏–ª(–∞) —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –≤–∞–º–∏.')
        asyncio.create_task(delete_message(msg, 10))
        await info_message(
            '—Ä–∞–∑–≤–æ–¥',
            message.chat.title,
            message.chat.id,
            message.from_user.first_name,
            message.from_user.id,
            wedding,
            person_two,
            message.from_user.username,
            None
        )
    if message:
        try:
            await message.delete()
        except (MessageToDeleteNotFound, MessageCantBeDeleted):
            pass
        return


@dp.callback_query_handler(lambda m: m.data in ['YES', 'NO'])
async def wedding_answer(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    person_first_name, person_id, person_two_first_name, person_two_id = db.get_wedding_const(
        callback_query.from_user.id, callback_query.message.chat.id)
    try:
        mention_one = await mention_text_2(person_first_name, person_id)
        mention_two = await mention_text_2(person_two_first_name, person_two_id)
        if callback_query.from_user.id == person_two_id:
            if callback_query.data == 'YES':
                msg = await bot.send_message(callback_query.message.chat.id, f'üíñ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –º–æ–ª–æ–¥–æ–∂—ë–Ω–æ–≤!\n'
                                                                             f'{mention_one} –∏ {mention_two} —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ.üíç')
                await callback_query.message.delete()
                asyncio.create_task(delete_message(msg, 20))
                db.wedding(callback_query.message.chat.id, person_id, mention_two)
                db.wedding(callback_query.message.chat.id, person_two_id, mention_one)
            if callback_query.data == 'NO':
                msg = await bot.send_message(callback_query.message.chat.id,
                                             f'{mention_one}, —Å–æ–∂–∞–ª–µ—é, {mention_two} –≤–∞–º –æ—Ç–∫–∞–∑–∞–ª(–∞).üíî')
                await callback_query.message.delete()
                asyncio.create_task(delete_message(msg, 20))
    except Exception as e:
        logging.info(
            f'{callback_query.message.text} - {callback_query.message.chat.id} - {callback_query.message.from_user.id}',
            exc_info=e)
    finally:
        db.delete_constant(person_two_id)


@dp.message_handler(commands=['–∫–∞—Ä–º–∞'])
async def carma(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    if utils.salent(message.chat.id):
        return
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
        first_name = message.reply_to_message.from_user.first_name
    else:
        user_id = message.from_user.id
        first_name = message.from_user.first_name
    user = utils.get_user(message.chat.id, user_id)
    rank = ''
    for k, v in range_tab.items():
        if user.reputation in v:
            rank = k
            break
    karma_title = ''
    for k, v in exp_tab.items():
        if user.karma >= 16450:
            karma_title = exp_tab[16450]
            break
        if user.karma <= k:
            karma_title = v
            break
    if rank == '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π':
        karma_title = karma_title[1]
    elif rank in ('–î–æ–±—Ä—ã–π','–û—á–µ–Ω—å –¥–æ–±—Ä—ã–π'):
        karma_title = karma_title[2]
    else:
        karma_title = karma_title[0]
    mention = await mention_text(first_name, user_id)
    text = fmt.text(fmt.hlink(*mention),
            f'\n‚ú®|–í–∞—à–∞ –∫–∞—Ä–º–∞: {rank} ({user.reputation})\n',
            f'üèÖ|–û—á–∫–∏ –∫–∞—Ä–º—ã: {user.karma}\n',
            f'‚òØÔ∏è|–í–∞—à –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–π —Ç–∏—Ç—É–ª: {karma_title}')
    await message.answer(text)


@dp.message_handler(lambda m: m.text in ('-','+'))
async def add_karma(message: types.Message):
    if message.reply_to_message:
        await try_delete(message)
        user_id = message.reply_to_message.from_user.id
        if user_id == message.from_user.id:
            await message.delete()
            await message.answer('–ò–∑–º–µ–Ω—è—Ç—å –∫–∞—Ä–º—É —Å–∞–º–æ–º—É —Å–µ–±–µ –Ω–µ–ª—å–∑—è!')
            return
        first_name = message.reply_to_message.from_user.first_name
        if utils.user_exists(message.chat.id, user_id):
            user = utils.get_user(message.chat.id, user_id)
            if message.text == '+':
                user.reputation += 1
            else:
                user.reputation -= 1
            if user.reputation > 500:
                user.reputation = 500
            if user.reputation < -500:
                user.reputation = -500
            rank = ''
            for k, v in range_tab.items():
                if user.reputation in v:
                    rank = k
                    break
            session.commit()
            mention_one = await mention_text(first_name, user_id)
            mention_two = await mention_text(message.from_user.first_name, message.from_user.id)
            await message.answer(fmt.text(fmt.hlink(*mention_one), ', –≤–∞–º –∏–∑–º–µ–Ω–∏–ª –∫–∞—Ä–º—É ', fmt.hlink(*mention_two), f'.\n–í–∞—à–∞ –∫–∞—Ä–º–∞: {rank} ({user.reputation})'))


@dp.message_handler(commands=['info'])
async def info(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    if utils.salent(message.chat.id):
        return
    if len(message.text.split()) >= 2:
        if not any([
            is_big_owner(message.from_user.id),
            is_owner(message.from_user.id),
            is_admin(message.chat.id, message.from_user.id),
            is_moder(message.chat.id, message.from_user.id)
        ]):
            return
        user_id, first_name, username = await ent(message)
    else:
        user_id = message.from_user.id
        username = message.from_user.id
        first_name = message.from_user.first_name
    mention = await mention_text(first_name, user_id)
    user = utils.get_user(message.chat.id, user_id)
    if not utils.user_exists(message.chat.id, user_id):
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –æ–±–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É —á–µ—Ä–µ–∑ /print')
    if user.wedding == '0':
        wedding = '–ù–µ –∂–µ–Ω–∞—Ç/–ù–µ –∑–∞–º—É–∂–µ–º'
    else:
        wedding = user.wedding
    rank = ''
    for k, v in range_tab.items():
        if user.reputation in v:
            rank = k
    text = (f'üî§|–ù–∏–∫–Ω–µ–π–º: @{user.username or "–ù–µ –∑–∞–¥–∞–Ω–æ"}\n'
            f'üë§|–ü—Ä–æ—Ñ–∏–ª—å: {fmt.hlink(*mention)}\n'
            f'üî¢|Id: <code>{user.user_id}</code>\n\n'
            f'üïõ|–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞: {user.create_time}\n'
            f'üí†|–†–∞–Ω–≥: {user.role}\n'
            f'‚ÜïÔ∏è|–ö–∞—Ä–º–∞: {rank} ({user.reputation})\n'
            f'üë´|–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {wedding}\n'
            f'üí∞|ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ –≤ —á–∞—Ç–µ: {user.cash}\n'
            f'üïê|–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user.first_message}\n'
            f'üïê|–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–Ω: {user.time_ban or "–ù–µ –±—ã–ª–æ"}\n'
            f'üïê|–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–µ–¥–Ω–∏–µ: {user.time_mute or "–ù–µ –±—ã–ª–æ"}\n'
            f'‚ö†Ô∏è|–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user.mute or "–ù–µ –±—ã–ª–æ"}\n'
            f'üïõ|–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {user.last_message}\n'
            f'üí¨|–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {user.count_message}\n'
            f'üÜô|–û–ø—ã—Ç: {user.exp}\n'
            f'üïê|–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {user.mute_reason or "–ù–µ –±—ã–ª–æ"}\n'
            )
    await message.answer(text)
    await info_message(
        'info',
        message.chat.title,
        message.chat.id,
        message.from_user.first_name,
        message.from_user.id,
        first_name,
        user_id,
        message.from_user.username,
        username
    )


@dp.message_handler(commands=['admins'])
async def admins(message: types.Message):
    await try_delete(message)
    if message.chat.type == 'private':
        return
    if utils.salent(message.chat.id):
        return
    if not any([
        is_big_owner(message.from_user.id),
        is_owner(message.from_user.id),
        is_admin(message.chat.id, message.from_user.id),
        is_moder(message.chat.id, message.from_user.id)
    ]):
        return
    admins, moders, owners = utils.get_all_admin(message.chat.id)
    text = fmt.text(fmt.hlink(*await mention_text('–í–ª–∞–¥–µ–ª–µ—Ü', config.ADMIN_ID)), '\n')
    for owner in owners:
        mention = await mention_text('–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü', owner.owner_id)
        text += fmt.text(fmt.hlink(*mention), '\n')
    text += '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n'
    for admin in admins:
       mention = await mention_text(admin.first_name, admin.user_id)
       text += fmt.text(fmt.hlink(*mention), '\n')
    text += '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:\n'
    for moder in moders:
        mention = await mention_text(moder.first_name, moder.user_id)
        text += fmt.text(fmt.hlink(*mention), '\n')
    msg = await message.answer(text)
    asyncio.create_task(delete_message(msg, 15))
    await info_message(
        'admins',
        message.chat.title,
        message.chat.id,
        message.from_user.first_name,
        message.from_user.id,
        message.from_user.first_name,
        message.from_user.id,
        message.from_user.username,
        message.from_user.username
    )


@dp.message_handler(content_types=['new_chat_members'])  # –í–æ—à–µ–ª
async def user_joined(message: types.Message):
    await try_delete(message)
    if message.new_chat_members[0].id == dict(await bot.get_me()).get('id'):
        group = Groups(group_id=message.chat.id, title=message.chat.title)
        user = FlameNet(
            chat_id=message.chat.id,
            user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            is_active=1,
            create_time=datetime.date.today(),
            first_message=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        )
        session.add(group)
        session.add(user)
        session.commit()
        db.add_user(message.chat.id, message.from_user.id, message.from_user.username, message.from_user.first_name, 1)
    else:
        if not utils.setka(message.chat.id):
            return
        for user in message.new_chat_members:
            mention = await mention_text(user.first_name, user.id)
            if not db.user_exists(message.chat.id, message.from_user.id):
                user = FlameNet(
                    chat_id=message.chat.id,
                    user_id=message.from_user.id,
                    username=message.from_user.username,
                    first_name=message.from_user.first_name,
                    is_active=1,
                    create_time=datetime.date.today(),
                    first_message=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                )
                session.add(user)
            else:
                user = utils.get_user(message.chat.id, message.from_user.id)
                user.is_active = 1
            session.commit()
            if utils.banned_exists(user.id):
                await bot.ban_chat_member(message.chat.id, user.id)
                await bot.send_message(
                    message.chat.id,
                    f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.'
                )
            if message.chat.id == -1001781348153:
                text = f'{fmt.hlink(*mention)}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä –º–∞—Ñ–∏–∏, {message.chat.title}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≥—Ä—É–ø–ø—ãüë•. –ñ–µ–ª–∞–µ–º –≤–∞–º –ø—Ä–∏—è—Ç–Ω—ã—Ö –∏–≥—Ä üëªüî•'
                button = types.InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã', url='https://t.me/flamee_RuleS')
                keyboard = types.InlineKeyboardMarkup().add(button)
                msg = await message.answer(text, reply_markup=keyboard)
                asyncio.create_task(delete_message(msg, 10))
            elif message.chat.id == -1001629215553:
                if db.get_gif()[0]:
                    text = f'–ü—Ä–∏–≤–µ—Ç, {fmt.hlink(*mention)}|<code>{user.id}</code>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {message.chat.title}.\n –ü–æ–ø–∞–ª –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã? –û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /join –∏ –∏–≥—Ä–∞–π. –ü–µ—Ä–≤—ã–µ —Ç—Ä–∏ —Ä–∞–∑–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞, –Ω–∏–∂–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã:'
                    buttons = [
                        types.InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞', url='https://t.me/flamecombatrules'),
                        types.InlineKeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–µ–π', url='https://t.me/flamecombatroles'),
                        types.InlineKeyboardButton('–ß–∞—Ç —Å –±–æ—Ç–∞–º–∏', url='https://t.me/+Ddvm07b6rKYxOTQy'),
                        types.InlineKeyboardButton('–ö–∞–Ω–∞–ª –í–ª–∞–¥–µ–ª—å—Ü–∞', url='https://t.me/derzkyi')
                        ]
                    keyboard = types.InlineKeyboardMarkup(row_width=1).add(*buttons)
                    msg = await message.answer(text, reply_markup=keyboard)
                    asyncio.create_task(delete_message(msg, 10))
            if utils.owner_exists(user.id):
                await bot.promote_chat_member(
                    message.chat.id,
                    user.id,
                    can_manage_chat=True,
                    can_delete_messages=True,
                    can_restrict_members=True
                )
                await bot.set_chat_administrator_custom_title(message.chat.id, user.id, custom_title='–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü')
                await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Ç–∏!</b>')
            await info_message(
                '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                message.chat.title,
                message.chat.id,
                message.from_user.first_name,
                message.from_user.id,
                user.first_name,
                user.id,
                message.from_user.username,
                user.username
            )


@dp.message_handler(content_types=["left_chat_member"])  # –í—ã—à–µ–ª
async def on_user_exit(message: types.Message):
    await try_delete(message)
    if not utils.setka(message.chat.id):
        return
    user = utils.get_user(message.chat.id, message.left_chat_member.id)
    user.is_active = 0
    session.commit()
    await info_message(
        '–í—ã—à–µ–ª –∏–∑ —á–∞—Ç–∞',
        message.chat.title,
        message.chat.id,
        message.from_user.first_name,
        message.from_user.id,
        message.left_chat_member.first_name,
        message.left_chat_member.id,
        message.from_user.username,
        message.left_chat_member.username
    )


@dp.message_handler(commands=['ban'])
async def ban(message: types.Message):
    if message.chat.type == 'private':
        return
    text = message.text.split()
    from_id = message.from_user.id
    chat_id = message.chat.id
    is_owner = db.get_owner(from_id)
    is_admin = db.get_admin(chat_id, from_id)
    is_moder = db.get_moder(chat_id, from_id)
    if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
        return
    user_id, first_name, username = await ent(message)
    if not db.user_exists(message.chat.id, user_id):
        db.add_user(message.chat.id, user_id, username, first_name,
                    1)
    is_owner_user = db.get_owner(user_id)
    is_admin_user = db.get_admin(chat_id, user_id)
    is_moder_user = db.get_moder(chat_id, user_id)
    if user_id == config.ADMIN_ID:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
        return
    elif is_moder and any([is_moder_user, is_admin_user, is_owner_user]):
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
        return
    elif is_admin and any([is_owner_user, is_admin_user]):
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
        return
    elif is_owner and is_owner_user:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
        return
    else:
        mention = await mention_text(first_name, user_id)
        db.add_ban(message.chat.id, user_id, text[-1])
        if text[-1] == '1':
            await bot.ban_chat_member(message.chat.id, user_id)
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.')
        else:
            await bot.unban_chat_member(message.chat.id, user_id, only_if_banned=True)
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} —Ä–∞–∑–±–∞–Ω–µ–Ω.')
    await info_message(
        'ban',
        message.chat.title,
        chat_id,
        message.from_user.first_name,
        from_id,
        first_name,
        user_id,
        message.from_user.username,
        username
    )
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    return


@dp.message_handler(commands=['set_admin'])  # /set_admin <username> 1 or 0
async def set_admin(message: types.Message):
    if message.chat.type == 'private':
        return
    from_id = message.from_user.id
    chat_id = message.chat.id
    is_owner = db.get_owner(from_id)
    is_admin = db.get_admin(chat_id, from_id)
    is_moder = db.get_moder(chat_id, from_id)
    if not any([is_owner, is_admin]) and config.ADMIN_ID != from_id:
        return
    text = message.text.split()
    chat_id = message.chat.id
    if message.from_user.id == config.ADMIN_ID:
        if len(text) == 2:
            if not message.reply_to_message:
                await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
                return

            user_id = message.reply_to_message.from_user.id
            first_name = message.reply_to_message.from_user.first_name
            username = message.reply_to_message.from_user.username
        else:
            user_id, first_name, username = await ent(message)
        if not db.user_exists(message.chat.id, user_id):
            db.add_user(message.chat.id, user_id, username, first_name,
                        1)
        is_owner_user = db.get_owner(user_id)
        if user_id == config.ADMIN_ID:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_moder:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_admin:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_owner and is_owner_user:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        else:
            mention = await mention_text(first_name, user_id)
            db.set_admin(message.chat.id, user_id, text[-1])
            if db.get_admin(message.chat.id, user_id):
                await bot.promote_chat_member(
                    chat_id,
                    user_id,
                    can_manage_chat=True,
                    can_delete_messages=True,
                    can_restrict_members=True
                )
                await asyncio.sleep(1)
                await bot.set_chat_administrator_custom_title(chat_id, user_id, custom_title='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.')
            else:
                await bot.promote_chat_member(
                    chat_id, user_id
                )
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        await info_message(
            'set_admin',
            message.chat.title,
            chat_id,
            message.from_user.first_name,
            from_id,
            first_name,
            user_id,
            message.from_user.username,
            username
        )
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    return


@dp.message_handler(commands=['tag'])
async def tag_set(message: types.Message):
    if message.chat.type == 'private':
        return
    from_id = message.from_user.id
    chat_id = message.chat.id
    is_owner = db.get_owner(from_id)
    is_admin = db.get_admin(chat_id, from_id)
    is_moder = db.get_moder(chat_id, from_id)
    if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
        return
    await Tagall.func.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /run (—Ç–µ–∫—Å—Ç –ø—Ä–∏–∑—ã–≤–∞)')
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    return


@dp.message_handler(commands=['run'], state=Tagall.func)
async def tag(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    text = message.text.split()
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    try:
        if len(text) >= 2:
            count = 0
            response = f'{" ".join(text[1:])}\n'
            users = db.select_all(chat_id)[:101]
            random.shuffle(users)
            for user_id, first_name in users:
                if not await state.get_state():
                    break
                mention = await mention_text(first_name, user_id)
                response += f'{fmt.hlink(*mention)}\n'
                count += 1
                if count == 5:
                    msg = await message.answer(response)
                    asyncio.create_task(delete_message(msg, 2))
                    await asyncio.sleep(3)
                    count = 0
                    response = f'{" ".join(text[1:])}\n'
    except RetryAfter:
        await asyncio.sleep(2)
    finally:
        await state.finish()


@dp.message_handler(commands=['—á–µ–∫'], state='*')
async def check_tag(message: types.Message, state: FSMContext):
    if await state.get_state():
        await message.answer(f'—Ç–µ–∫—É—â–µ–µ —Å—Ç–æ—Å—Ç–æ—è–Ω–∏–µ {fmt.quote_html(await state.get_state())}')
    else:
        await message.answer('–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')


@dp.message_handler(commands=['test'], state=Tagall.func)
async def test(message: types.Message, state: FSMContext):
    for i in range(100):
        if not await state.get_state():
            break
        msg = await message.answer(str(i))
        asyncio.create_task(delete_message(msg, 2))
        await asyncio.sleep(3)


@dp.message_handler(Text(equals="—Å—Ç–æ–ø", ignore_case=True), state=Tagall.func)
@dp.message_handler(Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state=Tagall.func)
async def stop(message: types.Message,  state=FSMContext):
    await state.finish()
    mention = await mention_text(message.from_user.first_name, message.from_user.id)
    await message.answer(f'{fmt.hlink(*mention)}, –ø—Ä–∏–∑—ã–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')


@dp.message_handler(commands=['–∏–≥–Ω–æ—Ä'])
async def ignore(message: types.Message):
    mention = await mention_text(message.from_user.first_name, message.from_user.id)
    db.active(message.chat.id, message.from_user.id, 0)
    await message.answer(f'{fmt.hlink(*mention)}, –í—ã –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –ø—Ä–∏–∑—ã–≤–∞!')


@dp.message_handler(commands=['set_moder'])  # /set_moder <username> 1 or 0
async def set_moder(message: types.Message):
    if message.chat.type == 'private':
        return
    from_id = message.from_user.id
    chat_id = message.chat.id
    is_owner = db.get_owner(from_id)
    is_admin = db.get_admin(chat_id, from_id)
    is_moder = db.get_moder(chat_id, from_id)
    if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
        return
    text = message.text.split()
    chat_id = message.chat.id
    if message.from_user.id == config.ADMIN_ID:
        if len(text) == 2:
            if not message.reply_to_message:
                await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
                return
            user_id = message.reply_to_message.from_user.id
            first_name = message.reply_to_message.from_user.first_name
            username = message.reply_to_message.from_user.username
        else:
            user_id, first_name, username = await ent(message)
        if not db.user_exists(message.chat.id, user_id):
            db.add_user(message.chat.id, user_id, username, first_name,
                        1)
        is_owner_user = db.get_owner(user_id)
        is_admin_user = db.get_admin(chat_id, user_id)
        if user_id == config.ADMIN_ID:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_moder:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_admin and any([is_owner_user, is_admin_user]):
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_owner and is_owner_user:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        else:
            mention = await mention_text(first_name, user_id)
            db.set_moder(message.chat.id, user_id, text[-1])
            if db.get_moder(message.chat.id, user_id):
                await bot.promote_chat_member(
                    chat_id,
                    user_id,
                    can_manage_chat=True,
                )
                await asyncio.sleep(5)
                await bot.set_chat_administrator_custom_title(chat_id, user_id, custom_title='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä')
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.')
            else:
                await bot.promote_chat_member(
                    chat_id, user_id
                )
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.')
        await info_message(
            'set_moder',
            message.chat.title,
            chat_id,
            message.from_user.first_name,
            from_id,
            message.from_user.first_name,
            from_id,
            message.from_user.username,
            message.from_user.username
        )
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    return


@dp.message_handler(commands=['add_money'])  # /add_money @username 1000
async def add_money(message: types.Message):
    try:
        if message.chat.type == 'private':
            return
        text = message.text.split()
        from_id = message.from_user.id
        is_owner = db.get_owner(from_id)
        if not any([is_owner, ]) and config.ADMIN_ID != from_id:
            return
        if len(text) >= 3:
            user_id, first_name, username = await ent(message)
        else:
            if not message.reply_to_message:
                await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
                return

            user_id = message.reply_to_message.from_user.id
            first_name = message.reply_to_message.from_user.first_name
            username = message.reply_to_message.from_user.username
        if not db.user_exists(message.chat.id, user_id):
            db.add_user(message.chat.id, user_id, username, first_name,
                        1)
        if abs(int(text[-1])) > 1000000000:
            await message.answer(f'–ß–∏—Å–ª–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–∑—É–º–Ω–æ–≥–æ!')
            return
        chat_id = message.chat.id
        if chat_id in [-1001496141543, -1001101450717]:
            chat_id = -1001781348153
        db.add_money(chat_id, user_id, int(text[-1]))
        mention = await mention_text(first_name, user_id)
        if int(text[-1]) > 0:
            await message.answer(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {fmt.hlink(*mention)} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {text[-1]} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ')  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõüí†
        else:
            await message.answer(
                f'–í–æ –≤—Ä–µ–º—è –Ω–∞–ª–æ–≥–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É {fmt.hlink(*mention)} –∏–∑—å—è–ª–∏ {text[-1]} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ')  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõüí†
        await info_message(
            'add_money',
            message.chat.title,
            message.chat.id,
            message.from_user.first_name,
            from_id,
            first_name,
            user_id,
            message.from_user.username,
            username
        )
    except Exception as e:
        logging.info(e)
    finally:
        try:
            await message.delete()
        except (MessageToDeleteNotFound, MessageCantBeDeleted):
            pass
        return


@dp.message_handler(commands='gift')
async def gift(message: types.Message):
    if message.chat.type == 'private':
        return
    if db.get_silent_mode(message.chat.id):
        await message.delete()
        return
    text = message.text.split()
    from_id = message.from_user.id
    if len(text) >= 3:
        user_id, first_name, username = await ent(message)
    else:
        if not message.reply_to_message:
            await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
            return

        user_id = message.reply_to_message.from_user.id
        first_name = message.reply_to_message.from_user.first_name
        username = message.reply_to_message.from_user.username
    if not db.user_exists(message.chat.id, user_id):
        db.add_user(message.chat.id, user_id, username, first_name,
                    1)
    cash = db.cash_one(message.chat.id, message.from_user.id)
    if int(text[-1]) <= 0:
        await message.answer('–ù–µ–ª—å–∑—è –æ—Ç–Ω–∏–º–∞—Ç—å –¥–µ–Ω—å–≥–∏!')
        return
    if cash < int(text[-1]):
        await message.answer('–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É.')
    else:
        db.add_money(message.chat.id, from_id, 0-int(text[-1]))
        db.add_money(message.chat.id, user_id, int(text[-1]))
        mention = await mention_text(first_name, user_id)
        donater = await mention_text(message.from_user.first_name, from_id)
        await message.answer(
            f'{fmt.hlink(*donater)} –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {fmt.hlink(*mention)} {text[-1]} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ')
    await info_message(
        'gift',
        message.chat.title,
        message.chat.id,
        message.from_user.first_name,
        from_id,
        first_name,
        user_id,
        message.from_user.username,
        username
    )
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    return


@dp.message_handler(commands='setting')
async def setting(message: types.Message):
    await try_delete(message)
    if message.chat.type != 'private':
        return
    big_owner = is_big_owner(message.from_user.id)
    owner = is_owner(message.from_user.id)
    if not any([big_owner, owner]):
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    buttons = ['–í–∞–ª—é—Ç–∞', '–û–ø—ã—Ç', '–ò–Ω—Ñ–æ–≥—Ä—É–ø–ø–∞', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –≥—Ä—É–ø–ø–µ']
    keyboard.add(*buttons)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=keyboard)
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    return


def key_setting():
    keyboard = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton('+', callback_data='+'), types.InlineKeyboardButton('-', callback_data='-')]
    keyboard.add(*buttons)
    return keyboard


def key_setting_exp():
    keyboard = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton('+', callback_data='+exp'),
               types.InlineKeyboardButton('-', callback_data='-exp')]
    keyboard.add(*buttons)
    return keyboard


def key_setting_group(groups):
    keyboard = types.InlineKeyboardMarkup()
    for group in groups:
        keyboard.add(types.InlineKeyboardButton(f'{group.title}', callback_data=group.group_id))
    return keyboard


def key_setting_gif():
    keyboard = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å', callback_data='gifon'),
               types.InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å', callback_data='gifoff')]
    keyboard.add(*buttons)
    return keyboard


@dp.message_handler(lambda m: m.text == '–í–∞–ª—é—Ç–∞')
async def cash(message: types.Message):
    if message.chat.type != 'private':
        return
    big_owner = is_big_owner(message.from_user.id)
    owner = is_owner(message.from_user.id)
    if not any([big_owner, owner]):
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        return
    setting = utils.get_setting()
    money = setting.money_for_game
    msg = await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã –∑–∞ –ø–æ–±–µ–¥—É –≤ –∏–≥—Ä–µ: {money}', reply_markup=key_setting())
    asyncio.create_task(delete_message(msg, 10))


@dp.message_handler(lambda m: m.text == '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –≥—Ä—É–ø–ø–µ')
async def gif(message: types.Message):
    if message.chat.type != 'private':
        return
    big_owner = is_big_owner(message.from_user.id)
    owner = is_owner(message.from_user.id)
    if not any([big_owner, owner]):
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        return
    setting = utils.get_setting()
    if setting.gif:
        params = '–î–∞'
    else:
        params = '–ù–µ—Ç'
    msg = await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {params}', reply_markup=key_setting_gif())
    asyncio.create_task(delete_message(msg, 10))


@dp.callback_query_handler(lambda m: 'gif' in m.data)
async def gif_swith(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    if callback_query.data == 'gifon':
        gif = 1
    else:
        gif = 0
    setting = utils.get_setting()
    setting.gif = gif
    session.commit()
    if setting.gif:
        params = '–î–∞'
    else:
        params = '–ù–µ—Ç'
    msg = await bot.edit_message_text(
        f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {params}',
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=key_setting_gif()
    )
    asyncio.create_task(delete_message(msg, 10))


@dp.message_handler(lambda m: m.text == '–û–ø—ã—Ç')
async def exp(message: types.Message):
    if message.chat.type != 'private':
        return
    big_owner = is_big_owner(message.from_user.id)
    owner = is_owner(message.from_user.id)
    if not any([big_owner, owner]):
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        return
    setting = utils.get_setting()
    exp = setting.exp_for_message
    msg = await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {exp}', reply_markup=key_setting_exp())
    asyncio.create_task(delete_message(msg, 10))


@dp.message_handler(lambda m: m.text == '–ò–Ω—Ñ–æ–≥—Ä—É–ø–ø–∞')
async def info_group(message: types.Message):
    if message.chat.type != 'private':
        return
    big_owner = is_big_owner(message.from_user.id)
    owner = is_owner(message.from_user.id)
    if not any([big_owner, owner]):
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        return
    groups = utils.get_groups()
    msg = await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.', reply_markup=key_setting_group(groups))
    asyncio.create_task(delete_message(msg, 10))


@dp.callback_query_handler(lambda m: 'exp' in m.data)
async def set_exp_game(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    setting = utils.get_setting()
    exp = setting.exp_for_message
    if callback_query.data[0] == '+':
        exp += 1
    if exp > 0 and callback_query.data[0] == '-':
        exp -= 1
    setting.exp = exp
    session.commit()
    msg = await bot.edit_message_text(
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {exp}',
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=key_setting_exp()
    )
    asyncio.create_task(delete_message(msg, 10))


@dp.callback_query_handler(lambda m: m.data in '+-')
async def set_money_game(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    setting = utils.get_setting()
    money = setting.money_for_game
    if callback_query.data == '+':
        money += 1
    if money > 0 and callback_query.data == '-':
        money -= 1
    setting.money_for_game = money
    session.commit()
    msg = await bot.edit_message_text(
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã –∑–∞ –ø–æ–±–µ–¥—É –≤ –∏–≥—Ä–µ: {money}',
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=key_setting()
    )
    asyncio.create_task(delete_message(msg, 10))


@dp.callback_query_handler(lambda m: m.data.startswith('-100'))
async def set_info_group(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    group = utils.get_group(callback_query.data)
    setting = utils.get_setting()
    setting.id_group_log = callback_query.data
    session.commit()
    msg = await bot.edit_message_text(
        f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group.title}',
        callback_query.message.chat.id,
        callback_query.message.message_id
    )
    asyncio.create_task(delete_message(msg, 30))


@dp.message_handler(commands=['mute'])  # /mute <username> 1m or 1h  reason
async def mute(message: types.Message):
    if message.chat.type == 'private':
        return
    await try_delete(message)
    try:
        from_id = message.from_user.id
        chat_id = message.chat.id
        is_owner = db.get_owner(from_id)
        is_admin = db.get_admin(chat_id, from_id)
        is_moder = db.get_moder(chat_id, from_id)
        if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id and from_id != 2146850501:
            return
        text = message.text.split()
        if message.reply_to_message:
            user_id = message.reply_to_message.from_user.id
            first_name = message.reply_to_message.from_user.first_name
            username = message.reply_to_message.from_user.username
        else:
            user_id, first_name, username = await ent(message)
        if not db.user_exists(message.chat.id, user_id):
            db.add_user(message.chat.id, user_id, username, first_name,
                        1)
        is_owner_user = db.get_owner(user_id)
        is_admin_user = db.get_admin(chat_id, user_id)
        is_moder_user = db.get_moder(chat_id, user_id)
        if user_id == config.ADMIN_ID:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_moder and any([is_moder_user, is_admin_user, is_owner_user]):
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_admin and any([is_owner_user, is_admin_user]):
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_owner and is_owner_user:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        else:
            mention = await mention_text(first_name, user_id)
            index = 0
            for word in text:
                if word.isalnum() and ('h' in word or 'm' in word):
                    index = text.index(word)
            mute_sec = int(text[index][:-1])
            end = text[index][-1]
            ending = utils.time_check(end, mute_sec)
            await bot.restrict_chat_member(message.chat.id, user_id,
                                           until_date=int(time.time()) + mute_sec * TIMECHECK.get(end, 1))
            mute_db = db.mute(message.chat.id, user_id) + 1
            db.add_mute(message.chat.id, user_id, mute_db, ' '.join(text[index:]))
            if mute_db >= 20:
                await bot.send_message(
                    chat_id,
                    f'{fmt.hlink(*mention)} —É –≤–∞—Å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π.\n–°–∫–æ—Ä–æ –±–æ—Ç –≤—ã–¥–∞—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫—É–ø–∏—Ç—å —Ä–∞–∑–≤–∞—Ä–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ!')
            if mute_db >= 25:
                db.add_ban(message.chat.id, user_id, 1)
                await bot.ban_chat_member(message.chat.id, user_id)
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç.')
            else:
                await message.answer(
                    f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {mute_sec} {ending}.\n–ü—Ä–∏—á–∏–Ω–∞: {" ".join(text[index + 1:])}\n–ù–∞—Ä—É—à–µ–Ω–∏–π: {mute_db}')
        await info_message(
            'mute',
            message.chat.title,
            message.chat.id,
            message.from_user.first_name,
            from_id,
            first_name,
            user_id,
            message.from_user.username,
            username
        )
    except (TypeError, ValueError) as e:
        await message.answer(f'–û–π, –æ—à–∏–±–∫–∞: {e.args}')
        await bot.send_message(db.get_group_message()[0], f'{message}')


@dp.message_handler(commands=['unmute'])
async def unmute(message: types.Message):
    if message.chat.type == 'private':
        return
    from_id = message.from_user.id
    chat_id = message.chat.id
    is_owner = db.get_owner(from_id)
    is_admin = db.get_admin(chat_id, from_id)
    is_moder = db.get_moder(chat_id, from_id)
    if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
        return
    text = message.text.split()
    if len(text) == 1:
        if not message.reply_to_message:
            await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
            return
        user_id = message.reply_to_message.from_user.id
        first_name = message.reply_to_message.from_user.first_name
        username = message.reply_to_message.from_user.username
    else:
        user_id, first_name, username = await ent(message)
    if not db.user_exists(message.chat.id, user_id):
        db.add_user(message.chat.id, user_id, username, first_name,
                    1)
    mention = await mention_text(first_name, user_id)
    await bot.restrict_chat_member(message.chat.id, user_id,
                                   permissions=types.ChatPermissions(True, True, True, True, True, True, True,
                                                                     True))
    db.update_mute(message.chat.id, user_id)
    await message.answer(f'C –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {fmt.hlink(*mention)} —Å–Ω—è—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.')
    await info_message(
        'unmute',
        message.chat.title,
        message.chat.id,
        message.from_user.first_name,
        from_id,
        first_name,
        user_id,
        message.from_user.username,
        username
    )
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    return


@dp.message_handler(lambda m: m.text.lower() == '–∑–∞–∫–∞–∑–∞—Ç—å')  # –¥–µ–π—Å—Ç–≤–∏—è
async def short_command(message: types.Message):
    if message.chat.type == 'private':
        await try_delete(message)
        return
    if utils.salent(message.chat.id):
        await try_delete(message)
        return
    if not message.reply_to_message:
        await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
        return
    person_one = await mention_text(message.from_user.first_name, message.from_user.id)
    person_two = await mention_text(message.reply_to_message.from_user.first_name,
                                    message.reply_to_message.from_user.id)
    await message.answer(f'{fmt.hlink(*person_one)} –∑–∞–∫–∞–∑–∞–ª {fmt.hlink(*person_two)}')
    await asyncio.sleep(1)
    await message.answer(f'{fmt.hlink(*person_two)} {random.choice(killer)}')
    await asyncio.sleep(1)
    await message.answer(f'{fmt.hlink(*person_one)} –∑–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!')
    return


async def add_mute(chat_id, first_name, user_id, times, reason):
    await bot.restrict_chat_member(chat_id, user_id,
                                   until_date=int(time.time()) + int(times[:-1]) * TIMECHECK.get(times[-1], 1))
    mute_db = db.mute(chat_id, user_id) + 1
    db.add_mute(chat_id, user_id, mute_db, f'{times} {reason}')
    mention = await mention_text(first_name, user_id)
    if mute_db >= 20:
        await bot.send_message(
            chat_id, f'{fmt.hlink(*mention)} —É –≤–∞—Å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π.\n–°–∫–æ—Ä–æ –±–æ—Ç –≤—ã–¥–∞—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω.\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫—É–ø–∏—Ç—å —Ä–∞–∑–≤–∞—Ä–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ!')
    if mute_db >= 25:
        db.add_ban(chat_id, user_id, 1)
        await bot.ban_chat_member(chat_id, user_id)
        await bot.send_message(
        chat_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç.')
    await bot.send_message(
        chat_id,
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {times[:-1]} {utils.time_check(times[-1], int(times[:-1]))}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–ù–∞—Ä—É—à–µ–Ω–∏–π: {mute_db}'
    )


@dp.message_handler(lambda m: m.text == '–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω')
async def unban(message: types.Message):
    if message.chat.type != 'private':
        await message.delete()
        return
    db.delete_constant(message.chat.id)
    keyboard = await group_keyboard(message.chat.id, 'unban')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', reply_markup=keyboard)


@dp.message_handler(lambda m: m.text == '–ö—É–ø–∏—Ç—å —Ä–∞–∑–≤–∞—Ä–Ω')
async def unwarn(message: types.Message):
    if message.chat.type != 'private':
        await message.delete()
        return
    db.delete_constant(message.chat.id)
    keyboard = await group_keyboard(message.chat.id, 'unwarn')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', reply_markup=keyboard)


@dp.message_handler(lambda m: m.text == '–ö—É–ø–∏—Ç—å VIP')
async def vip(message: types.Message):
    if message.chat.type != 'private':
        await message.delete()
        return
    if db.cash_db(message.from_user.id) >= 300:
        await buy(message.from_user.id, 300)
        db.create_vip(message.from_user.id, 1)
        await message.answer('–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ VIP\n /start —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—Å—è', reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')


@dp.message_handler(lambda m: m.text == 'VIP RP –∫–æ–º–∞–Ω–¥–∞')
async def vip_rp(message: types.Message):
    if message.chat.type != 'private':
        await message.delete()
        return
    if db.create_vip(message.from_user.id):
        com = db.rp_user(message.from_user.id)
        text = f'–£ –í–∞—Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ {len(com)} –∫–æ–º–∞–Ω–¥:\n'
        for com, *_ in com:
            text += f'<code>{com}</code> '
        await message.answer(text)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('–ü—Ä–∏–º–µ—Ä –≤ —á–∞—Ç–µ', callback_data='rp_show'))
        keyboard.add(types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏', callback_data='rp_delete'))
        await message.answer('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                             '—Å–º–∞–π–ª|–∫–æ–º–∞–Ω–¥–∞|–¥–µ–π—Å—Ç–≤–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä ü§ó|–æ–±–Ω—è—Ç—å|–æ–±–Ω—è–ª.\n', reply_markup=keyboard)


@dp.message_handler(lambda m: '|' in m.text)
async def rp_commands(message: types.Message):
    if message.chat.type != 'private':
        return
    text = message.text.split('|')
    if len(text) == 3:
        smile, command, desc = text
        db.create_rp(command, desc, smile, message.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='rp_ok'))
        keyboard.add(types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å', callback_data=f'rp_cancel_{command}'))
        try:
            await bot.edit_message_text(f'–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n {smile}|@yourname {desc} @someuser', message.from_user.id, message.message_id - 1, reply_markup=keyboard)
        except MessageCantBeEdited:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ü—Ä–∏–º–µ—Ä –≤ —á–∞—Ç–µ', callback_data='rp_show'))
            await message.delete()
            await message.answer('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                                                '—Å–º–∞–π–ª|–∫–æ–º–∞–Ω–¥–∞|–¥–µ–π—Å—Ç–≤–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä ü§ó|–æ–±–Ω—è—Ç—å|–æ–±–Ω—è–ª.\n',
                                                reply_markup=keyboard)

def keyboard_rp(user_id):
    com = db.rp_user(user_id)
    buttons = []
    for c, d, i in com:
        buttons.append(types.InlineKeyboardButton(f'{i} -{c} - {d}', callback_data=f'rpdel_{i}'))
    keyboard = types.InlineKeyboardMarkup(row_width=1).add(*buttons)
    keyboard.add(types.InlineKeyboardButton(f'–ó–∞–∫—Ä—ã—Ç—å', callback_data=f'rpdel_close'))
    return keyboard


@dp.callback_query_handler(lambda m: 'rp_' in m.data)
async def rp_call(callback_query: types.CallbackQuery):
    if 'show' in callback_query.data:
        await callback_query.answer('ü§ó|yourname –æ–±–Ω—è–ª somename', show_alert=True)
    if 'ok' in callback_query.data:
        await callback_query.answer('–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.', show_alert=True)
        await callback_query.message.delete()
    if 'cancel' in callback_query.data:
        await bot.answer_callback_query(callback_query.id)
        db.rp_delete(callback_query.from_user.id, callback_query.data.split('_')[-1])
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('–ü—Ä–∏–º–µ—Ä –≤ —á–∞—Ç–µ', callback_data='rp_show'))
        await callback_query.message.delete()
        await callback_query.message.answer('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                             '—Å–º–∞–π–ª|–∫–æ–º–∞–Ω–¥–∞|–¥–µ–π—Å—Ç–≤–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä ü§ó|–æ–±–Ω—è—Ç—å|–æ–±–Ω—è–ª.\n', reply_markup=keyboard)
    if 'delete' in callback_query.data:
        await bot.answer_callback_query(callback_query.id)
        await callback_query.message.delete()
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', reply_markup=keyboard_rp(callback_query.from_user.id))



@dp.callback_query_handler(lambda m: 'rpdel_' in m.data)
async def rp_delete(callback_query: types.CallbackQuery):
    if callback_query.data.split('_')[-1] == 'close':
        await callback_query.message.delete()
        return
    db.rp_delete_by_id(callback_query.data.split('_')[-1])
    await callback_query.answer('–£–¥–∞–ª–µ–Ω–æ.')
    await callback_query.message.delete()
    await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', reply_markup=keyboard_rp(callback_query.from_user.id))


@dp.message_handler(lambda m: m.text == '–ö—É–ø–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å')
async def prefix(message: types.Message):
    if message.chat.type != 'private':
        await message.delete()
        return
    db.delete_constant(message.chat.id)
    keyboard = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton('–ù–∞ 3 –¥–Ω—è, 50 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ', callback_data='3day'),
               types.InlineKeyboardButton('–ù–∞ –Ω–µ–¥–µ–ª—é, 100 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ', callback_data='week')]
    keyboard.add(*buttons)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', reply_markup=keyboard)


async def group_keyboard(user_id, command):
    groups = db.all_group()
    buttons = []
    for group in groups:
        if db.user_exists(group[0], user_id):
            if command == 'prefix':
                buttons.append(types.InlineKeyboardButton(group[1], callback_data=f'p{group[0]}'))
            elif command == 'unban':
                buttons.append(types.InlineKeyboardButton(group[1], callback_data=f'b{group[0]}'))
            else:
                buttons.append(types.InlineKeyboardButton(group[1], callback_data=f'w{group[0]}'))
    return types.InlineKeyboardMarkup(row_width=2).add(*buttons)


@dp.callback_query_handler(lambda m: m.data in ['3day', 'week'])
async def prefix_buy(callback_query: types.CallbackQuery):
    try:
        await bot.answer_callback_query(callback_query.id)
        if callback_query.data == '3day':
            db.period_contain(user_id=callback_query.from_user.id, price=50, period=3)
        else:
            db.period_contain(user_id=callback_query.from_user.id, price=100, period=7)
        keyboard = await group_keyboard(callback_query.message.chat.id, command='prefix')
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', reply_markup=keyboard)
    except Exception as e:
        db.delete_constant(callback_query.message.from_user.id)
        logging.info(
            f'{callback_query.message.text} - {callback_query.message.chat.id} - {callback_query.message.from_user.id}',
            exc_info=e)
    finally:
        await callback_query.message.delete()


@dp.callback_query_handler(lambda m: m.data.startswith('b-100'))
async def unban_cash(callback_query: types.CallbackQuery):
    chat_id = callback_query.data[1:]
    try:
        if db.cash_db(callback_query.from_user.id) >= 200:
            await buy(callback_query.from_user.id, 200)
            db.add_ban(chat_id, callback_query.from_user.id, 0)
            await bot.unban_chat_member(chat_id, callback_query.from_user.id)
            await callback_query.message.answer('–£—Å–ø–µ—à–Ω–æ!\n /start —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—Å—è', reply_markup=types.ReplyKeyboardRemove())
            await info_message(
                '–ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑–±–∞–Ω–∞',
                callback_query.message.chat.title,
                callback_query.message.chat.id,
                callback_query.message.from_user.first_name,
                callback_query.message.from_user.id,
                None,
                None,
                callback_query.message.from_user.username,
                None
            )
        else:
            await callback_query.message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
    except Exception as e:
        await callback_query.message.answer(f'{e}')


@dp.callback_query_handler(lambda m: m.data.startswith('w-100'))
async def warn_cash(callback_query: types.CallbackQuery):
    chat_id = callback_query.data[1:]
    try:
        if db.cash_db(callback_query.from_user.id) >= 150:
            await buy(callback_query.from_user.id, 150)
            db.unwarn(chat_id, callback_query.from_user.id, 150)
            await callback_query.message.answer(f'–£—Å–ø–µ—à–Ω–æ!\n /start —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—Å—è', reply_markup=types.ReplyKeyboardRemove())
            await info_message(
                '–ü–æ–∫—É–ø–∫–∞ —Ä–∞–∑–≤–∞—Ä–Ω–∞',
                callback_query.message.chat.title,
                callback_query.message.chat.id,
                callback_query.message.from_user.first_name,
                callback_query.message.from_user.id,
                None,
                None,
                callback_query.message.from_user.username,
                None
            )
        else:
            await callback_query.message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')
    except Exception as e:
        await callback_query.message.answer(f'{e}')


@dp.callback_query_handler(lambda m: m.data.startswith('p-100'))
async def set_group(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    try:
        chat_id = callback_query.data[1:]
        msg = await bot.get_chat_administrators(chat_id)
        if len(msg) >= 50:
            m = await callback_query.message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: {len(msg)}\n –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - 50')
            asyncio.create_task(delete_message(m, 5))
        db.period_contain(chat_id=chat_id, user_id=callback_query.from_user.id)
        price, x, y = db.period_contain(user_id=callback_query.from_user.id, params=1)
        if db.cash_db(callback_query.from_user.id) >= price:
            await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–µ—Ñ–∏–∫—Å, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π 16 —Å–∏–º–≤–æ–ª–æ–≤.\n'
                                                '–ó–∞ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–∞–Ω!\n\n'
                                                '–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥ –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Å "!" ("!–ü—Ä–µ—Ñ–∏–∫—Å")')
        else:
            await callback_query.message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
            db.delete_constant(callback_query.message.from_user.id)
    except Exception as e:
        db.delete_constant(callback_query.message.from_user.id)
        logging.info(
            f'{callback_query.message.text} - {callback_query.message.chat.id} - {callback_query.message.from_user.id}',
            exc_info=e)
    finally:
        await callback_query.message.delete()


async def buy(user_id, price):
    groups = db.all_group()
    for group in groups:
        if db.user_exists(group[0], user_id):
            cash = db.cash_one(group[0], user_id)
            if cash >= price:
                db.add_money(group[0], user_id, -price)
                break
            price -= cash
            db.add_money(group[0], user_id, -cash)


@dp.message_handler(commands=['money'])
async def money_user(message: types.Message):
    if message.chat.type == 'private':
        return
    if db.get_silent_mode(message.chat.id):
        await message.delete()
        return
    cash = db.cash_db(message.from_user.id)
    cash_one = db.cash_one(message.chat.id, message.from_user.id)
    text = f'–ë–∞–ª–∞–Ω—Å –≤ {message.chat.title}: {cash_one} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n\n–ë–∞–ª–∞–Ω—Å –≤ —Å–µ—Ç–∏: {cash} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n'
    mention = await mention_text(message.from_user.first_name, message.from_user.id)
    if cash <= 0:
        answer = [', –Ω–∞—Å –æ–≥—Ä–∞–±–∏–ª–∏, –º–∏–ª–æ—Ä–¥!', ', –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∑–æ–ª–æ—Ç–∞!!', '–Ω–∞—à—É –∫–∞–∑–Ω—É –ø–æ–µ–ª –¥–æ–ª–≥–æ–Ω–æ—Å–∏–∫, –º–∏–ª–æ—Ä–¥!', ', –≤–æ—Ç –±—ã —Å–∫–∏–Ω—É–ª–∏—Å—å –±—ã –≤—Å–µ –ö–∏—Ç–∞–π—Ü—ã –ø–æ ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ']
        text += f'{fmt.hlink(*mention)}{random.choice(answer)}'
    elif cash == 50:
        text += f'{fmt.hlink(*mention)} —É–∂–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø—Ä–µ—Ñ –Ω–∞ 3 –¥–Ω—è!'
    elif cash == 100:
        text += f'{fmt.hlink(*mention)} —É–∂–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø—Ä–µ—Ñ –Ω–∞ 7 –¥–Ω–µ–π!'
    elif cash == 150:
        text += f'{fmt.hlink(*mention)} –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å —Å —Å–µ–±—è –≤—Å–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è!'
    elif cash == 200:
        text += f'{fmt.hlink(*mention)}, –µ—Å–ª–∏ –∑–∞–±–∞–Ω—è—Ç, –µ—Å—Ç—å —à–∞–Ω—Å —Ä–∞–∑–±–∞–Ω–∞!'
    elif cash == 300:
        text += f'{fmt.hlink(*mention)}, –ø–æ—Ä–∞ –∑–∞ VIP-–æ–º!'
    elif cash <= 100:
        answer = [', –º–æ–∂–Ω–æ –Ω–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ —Å–µ–±–µ! –ß–µ–±—É—Ä–µ–∫ –Ω–∞ –≤—Å–µ!!!',
                  ', —ç—Ö, –µ—â–µ –ø–∞—Ä—É ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ –∏ –∑–∞–∂–∏–≤–µ–º!',
                  ', —Å —Ç–∞–∫–∏–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –º–æ–∂–Ω–æ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å! –í –µ–¥—É...',
                  ', –≥–æ–≤–æ—Ä–∏–ª–∞ –º–∞–º–∞, –∏—â–∏ —Ö–æ—Ä–æ—à—É—é —Ä–∞–±–æ—Ç—É...',
                  ', –∫–æ–ø–∏–º –Ω–∞ –º–µ—á—Ç—É']
        text += f'{fmt.hlink(*mention)}{random.choice(answer)}'
    elif cash <= 1000:
        answer = [', –µ—â—ë –ø–æ–¥–∫–æ–ø–∏—Ç—å –∏ –Ω–∞ –ö–∞–Ω–∞—Ä—ã...', ', –µ—à—å –∞–Ω–∞–Ω–∞—Å—ã, —Ä—è–±—á–∏–∫–æ–≤ –∂—É–π!', ', –ø–æ—Ä–∞ –µ—Ö–∞—Ç—å —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Å–µ–±—è.']
        text += f'{fmt.hlink(*mention)}{random.choice(answer)}'
    else:
        answer = [', —Ç–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∏–∫–æ–º—É –Ω–µ–ª—å–∑—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å!',
                  ', –õ–æ—Å –ê–Ω–∂–µ–ª–µ—Å –∂–¥–µ—Ç! –í—Å–µ –Ω–∞ –¥–∞–±–ª –∑–µ—Ä–æ!',
                  ', —Å–ª–µ—Ç–∞—Ç—å –≤ –∫–æ—Å–º–æ—Å –∏–ª–∏ –∫—É–ø–∏—Ç—å —Å–µ–±–µ –µ—â–µ –æ–¥–∏–Ω –æ—Å—Ç—Ä–æ–≤?...',
                  ', "... —Ü–∞—Ä–µ–≤–∏—á —Ç–∞–º –Ω–∞–¥ –∑–ª–∞—Ç–æ–º —á–∞—Ö–Ω–µ—Ç..."',
                  ', –í—ã –∑–∞–Ω—è–ª–∏ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ —Å–∞–º—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –ª—é–¥–µ–π!']
        text += f'{fmt.hlink(*mention)}{random.choice(answer)}'
    await message.answer(text)
    await info_message(
        'money',
        message.chat.title,
        message.chat.id,
        message.from_user.first_name,
        message.from_user.id,
        None,
        None,
        message.from_user.username,
        None
    )
    try:
        await message.delete()
    except (MessageToDeleteNotFound, MessageCantBeDeleted):
        pass
    return


@dp.message_handler(lambda m: m.text.startswith('!'))
async def prefix_sets(message: types.Message):
    if message.chat.type != 'private':
        return
    if not db.check_constaints(message.from_user.id):
        await message.answer('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    price, period, chat_id = db.period_contain(user_id=message.from_user.id, params=1)
    try:
        if len(message.text[1:]) > 16:
            await message.answer('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å! –í–≤–µ–¥–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 16 —Å–∏–º–≤–æ–ª–æ–≤!')
        elif message.text[1:] in config.WORDS:
            await message.answer('–ü—Ä–µ—Ñ–∏–∫—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
        else:
            await bot.promote_chat_member(
                chat_id,
                message.from_user.id,
                can_manage_chat=True
            )
            await asyncio.sleep(1)
            await bot.set_chat_administrator_custom_title(chat_id, message.from_user.id, custom_title=message.text[1:])
            await buy(message.chat.id, int(price))
            dates = db.set_period(chat_id, message.from_user.id, period)
            await message.answer(f'–í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å <b>{message.text[1:]}</b>\n –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {dates}\n /start —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—Å—è', reply_markup=types.ReplyKeyboardRemove())
            await info_message(
                '–ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞',
                message.chat.title,
                message.chat.id,
                message.from_user.first_name,
                message.from_user.id,
                None,
                None,
                message.from_user.username,
                None
            )
    except Exception as e:
        await bot.promote_chat_member(
            chat_id,
            message.from_user.id,
            can_manage_chat=False
        )
        await message.answer(f'{e}')
        logging.info(f'{message.text} - {message.chat.id} - {message.from_user.id}', exc_info=e)
    finally:
        db.delete_constant(message.from_user.id)
        await message.delete()


@dp.message_handler(lambda m: m.text == '–ö—É–ø–∏—Ç—å ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ')
async def coins(message: types.Message):
    owners = db.owners()
    text = ''
    for owner in owners:
        mention = await mention_text('–í–ª–∞–¥–µ–ª–µ—Ü', owner[0])
        text += f'{fmt.hlink(*mention)}\n'
    await message.answer(f'–î–ª—è –ø–æ–∫—É–ø–∫–∏ ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å\n{text}\n /start —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—Å—è', reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(commands=['—Å–Ω—è—Ç—å'])
async def down(message: types.Message):
    if message.chat.type == 'private':
        return
    try:
        from_id = message.from_user.id
        chat_id = message.chat.id
        is_owner = db.get_owner(from_id)
        is_admin = db.get_admin(chat_id, from_id)
        is_moder = db.get_moder(chat_id, from_id)
        if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
            return
        user_id, first_name, username = await ent(message)
        mention = await mention_text(first_name, user_id)
        await bot.promote_chat_member(
            chat_id,
            user_id
        )

        await message.answer(f'{fmt.hlink(*mention)}, –≤—ã —Å–Ω—è—Ç—ã —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.')
    except Exception as e:
        logging.info(f'{message.text} - {message.chat.id} - {message.from_user.id}', exc_info=e)
    finally:
        try:
            await message.delete()
        except (MessageToDeleteNotFound, MessageCantBeDeleted):
            pass
        return


@dp.message_handler(commands='prefix')
async def prefix(message: types.Message):
    if message.chat.type == 'private':
        return
    try:
        text = message.text.split()
        from_id = message.from_user.id
        chat_id = message.chat.id
        is_owner = db.get_owner(from_id)
        is_admin = db.get_admin(chat_id, from_id)
        is_moder = db.get_moder(chat_id, from_id)
        if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
            return
        user_id, first_name, username = await ent(message)
        if not db.user_exists(message.chat.id, user_id):
            db.add_user(message.chat.id, user_id, username, first_name,
                        1)
        mention = await mention_text(first_name, user_id)
        await bot.promote_chat_member(
            chat_id,
            user_id
        )
        await message.answer(f'{fmt.hlink(*mention)}, –í–∞–º —É–¥–∞–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å!.\n–ü—Ä–∏—á–∏–Ω–∞: {text[-1]}.')
        await info_message(
            'delete prefix',
            message.chat.title,
            message.chat.id,
            message.from_user.first_name,
            message.from_user.id,
            first_name,
            user_id,
            message.from_user.username,
            username
        )
    except Exception as e:
        logging.info(f'{message.text} - {message.chat.id} - {message.from_user.id}', exc_info=e)
    finally:
        try:
            await message.delete()
        except (MessageToDeleteNotFound, MessageCantBeDeleted):
            pass
        return


@dp.message_handler()
async def mess_handler(message: types.Message):
    if not message.chat.id in [group.group_id for group in utils.get_groups()]:
        return
    text = message.text
    chat_id = message.chat.id
    from_id = message.from_user.id
    if not db.user_exists(chat_id, from_id):
        user = FlameNet(
            chat_id=chat_id,
            user_id=from_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            is_active=1,
            create_time=datetime.date.today(),
            first_message=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        )
        session.add(user)
    else:
        user = utils.get_user(chat_id, from_id)

    if db.check_flood(chat_id, text, from_id, message.message_id):
        if not any([
            is_big_owner(from_id),
            is_owner(from_id),
            is_admin(chat_id, from_id),
            is_moder(chat_id, from_id)
        ]):
            await add_mute(chat_id, message.from_user.first_name, from_id, '30m', '–§–ª—É–¥')
            user.mute += 1
            user.mute_reason = '30m –§–ª—É–¥'
            user.time_mute = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            await info_message(
                '–ê–Ω—Ç–∏—Ñ–ª—É–¥ –æ—Ç –±–æ—Ç–∞',
                message.chat.title,
                message.chat.id,
                dict(await bot.get_me()).get('first_name'),
                dict(await bot.get_me()).get('id'),
                message.from_user.first_name,
                message.from_user.id,
                dict(await bot.get_me()).get('username'),
                message.from_user.username
            )

    user.last_message = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    if not user.count_message:
        user.first_message = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    user.username = message.from_user.username
    user.first_name = message.from_user.first_name
    user.karma += 1
    user.role, user.exp = utils.exp(user.exp, user.count_message)
    user.count_message += 1
    session.commit()
    if utils.serial_exists(message.chat.id):
        victim = Killer(user_id=message.from_user.id, first_name=message.from_user.first_name, chat_id=message.chat.id)
        session.add(victim)
        if utils.stop_victim(message.chat.id):
            users_lottery = utils.get_killer(message.chat.id)
            if utils.get_lottery(message.chat.id):
                text = '–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n'
                c = 1
                for user_lottery in users_lottery:
                    mention = await mention_text(user_lottery.first_name, user_lottery.user_id)
                    text += fmt.text(c, ') ', fmt.hlink(*mention), '\n')
                    c += 1
                await message.answer(text)
                await message.answer('–í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!')
                await asyncio.sleep(10)
                x = 0
                if len(users_lottery) >= 5:
                    x = 5
                else:
                    x = len(users_lottery)
                users_random = random.sample(users_lottery, k=x)
                text = '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n'
                for user_random in users_random:
                    user = utils.get_user(message.chat.id, user_random.user_id)
                    user.cash += 3
                    mention = await mention_text(user_random.first_name, user_random.user_id)
                    text += fmt.text(fmt.hlink(*mention), ' - 3 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n')
            else:
                user_random = random.choice(users_lottery)
                user = utils.get_user(message.chat.id, user_random.user_id)
                mention = await mention_text(user_random.first_name, user_random.user_id)
                item = random.choice(box)
                text = fmt.text(fmt.hlink(*mention), f'–∫ –≤–∞–º –ø—Ä–∏–±—ã–ª –∫—É—Ä—å–µ—Ä –∏ –¥–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º –ø–æ—Å—ã–ª–∫—É. –ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç —á—Ç–æ –≤–Ω—É—Ç—Ä–∏.\n–í—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤—Å–∫—Ä—ã–≤–∞–µ—Ç–µ –µ–µ –∏ –≤–∞–º –¥–æ—Å—Ç–∞–µ—Ç—Å—è - {item}\n')
                items = user.items
                if items == '0':
                    items = f'{item}:1'
                else:
                    items = [x.split(':') for x in [item for item in items.split(',')]]
                    items_to_dict = {x: int(y) for x, y in items}
                    items_to_dict[item] = int(items_to_dict.get(item, 0)) + 1
                    items = ','.join([f'{k}:{v}' for k, v in items_to_dict.items()])
                user.items = items
            users_lottery.delete()
            session.commit()
            await message.answer(text)
    for word in config.WORDS:
        if word in text.lower():
            try:
                await message.delete()
            except (MessageToDeleteNotFound, MessageCantBeDeleted):
                pass
            return

    for entity in message.entities:
        if entity.type in ['url', 'text_link']:
            if not any([is_owner, is_admin, is_moder]):
                if not utils.banned_exists(message.from_user.id):
                    baned = Banned(user_id=message.from_user.id, desc='–î–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫')
                    session.add(baned)
                    session.commit()
                for group in utils.get_groups():
                    mention = await mention_text(message.from_user.first_name, message.from_user.id)
                    if db.user_exists(group.group_id, message.from_user.id):
                        await bot.ban_chat_member(group.group_id, message.from_user.id)
                        await bot.send_message(group.group_id,
                                               f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {fmt.hlink(*mention)} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –†–µ–∫–ª–∞–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏.')
                        await info_message(
                            '–ë–∞–Ω –∑–∞ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏',
                            message.chat.title,
                            message.chat.id,
                            dict(await bot.get_me()).get('first_name'),
                            dict(await bot.get_me()).get('id'),
                            message.from_user.first_name,
                            message.from_user.id,
                            dict(await bot.get_me()).get('username'),
                            message.from_user.username
                        )
            await try_delete(message)

    mention = await mention_text(message.from_user.first_name, message.from_user.id)
    if utils.check_vip(message.from_user.id):
        await message.answer(fmt.text(fmt.hlink(*mention),'–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è VIP –∏—Å—Ç–µ–∫!'))

    users = utils.get_users(message.chat.id)
    for user in users:
        if db.delete_prefix(message.chat.id, user_id) and not any([is_owner, is_admin, is_moder]):
            await bot.promote_chat_member(
                chat_id,
                user_id
            )
            await info_message(
                '–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞',
                message.chat.title,
                message.chat.id,
                dict(await bot.get_me()).get('first_name'),
                dict(await bot.get_me()).get('id'),
                message.from_user.first_name,
                user_id,
                dict(await bot.get_me()).get('username'),
                message.from_user.username
            )


@dp.errors_handler(exception=exceptions.UserIsAnAdministratorOfTheChat)
async def bot_blocked_admin_chat(update: types.Update, exception: exceptions.UserIsAnAdministratorOfTheChat):
    text = fmt.text('–ì—Ä—É–ø–ø–∞: ',
                    update.message.chat.title or update.message.chat.first_name,
                    ' - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ',
                    fmt.hlink(*await mention_text(update.message.from_user.first_name, update.message.from_user.id)),
                    ' -  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ',
                    update.message.text,
                    ' - –û—à–∏–±–∫–∞: ',
                    exception)
    await bot.send_message(db.get_group_message()[0], text, parse_mode=None)


@dp.errors_handler(exception=exceptions.MessageToDeleteNotFound)
async def bot_not_found_message(update: types.Update, exception: exceptions.MessageToDeleteNotFound):
    text = fmt.text('–ì—Ä—É–ø–ø–∞: ',
                    update.message.chat.title or update.message.chat.first_name,
                    ' - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ',
                    fmt.hlink(*await mention_text(update.message.from_user.first_name, update.message.from_user.id)),
                    ' -  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ',
                    update.message.text,
                    ' - –û—à–∏–±–∫–∞: ',
                    exception)
    await bot.send_message(db.get_group_message()[0], text, parse_mode=None)


@dp.errors_handler(exception=exceptions.MessageCantBeDeleted)
async def bot_message_delete(update: types.Update, exception: exceptions.MessageCantBeDeleted):
    text = fmt.text('–ì—Ä—É–ø–ø–∞: ',
                    update.message.chat.title or update.message.chat.first_name,
                    ' - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ',
                    fmt.hlink(*await mention_text(update.message.from_user.first_name, update.message.from_user.id)),
                    ' -  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ',
                    update.message.text,
                    ' - –û—à–∏–±–∫–∞: ',
                    exception)
    await bot.send_message(db.get_group_message()[0], text, parse_mode=None)


@dp.errors_handler(exception=exceptions.ChatAdminRequired)
async def bot_blocked_admin_required(update: types.Update, exception: exceptions.ChatAdminRequired):
    text = fmt.text('–ì—Ä—É–ø–ø–∞: ',
                    update.message.chat.title or update.message.chat.first_name,
                    ' - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ',
                    fmt.hlink(*await mention_text(update.message.from_user.first_name, update.message.from_user.id)),
                    ' -  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ',
                    update.message.text,
                    ' - –û—à–∏–±–∫–∞: ',
                    exception)
    await bot.send_message(db.get_group_message()[0], text, parse_mode=None)


@dp.errors_handler(exception=exceptions.NotEnoughRightsToRestrict)
async def bot_no_enough_rights(update: types.Update, exception: exceptions.NotEnoughRightsToRestrict):
    text = fmt.text('–ì—Ä—É–ø–ø–∞: ',
                    update.message.chat.title or update.message.chat.first_name,
                    ' - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ',
                    fmt.hlink(*await mention_text(update.message.from_user.first_name, update.message.from_user.id)),
                    ' -  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ',
                    update.message.text,
                    ' - –û—à–∏–±–∫–∞: ',
                    exception)
    await bot.send_message(db.get_group_message()[0], text, parse_mode=None)


@dp.errors_handler(exception=sqlite3.OperationalError)
async def bot_sqlite(update: types.Update, exception: sqlite3.OperationalError):
    text = fmt.text('–ì—Ä—É–ø–ø–∞: ',
                    update.message.chat.title or update.message.chat.first_name,
                    ' - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ',
                    fmt.hlink(*await mention_text(update.message.from_user.first_name, update.message.from_user.id)),
                    ' -  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ',
                    update.message.text,
                    ' - –û—à–∏–±–∫–∞: ',
                    exception)
    await bot.send_message(db.get_group_message()[0], text, parse_mode=None)


@dp.errors_handler(exception=exceptions.BotKicked)
async def bot_bad_request(update: types.Update, exception: exceptions.BotKicked):
    text = fmt.text('–ì—Ä—É–ø–ø–∞: ',
                    update.message.chat.title or update.message.chat.first_name,
                    ' - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ',
                    fmt.hlink(*await mention_text(update.message.from_user.first_name, update.message.from_user.id)),
                    ' -  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ',
                    update.message.text,
                    ' - –û—à–∏–±–∫–∞: ',
                    exception)
    await bot.send_message(db.get_group_message()[0], text, parse_mode=None)


@dp.errors_handler(exception=exceptions.BadRequest)
async def bot_bad_request(update: types.Update, exception: exceptions.BadRequest):
    message = update.message or update.callback_query.message
    text = fmt.text('–ì—Ä—É–ø–ø–∞: ',
                    message.chat.title or update.message.chat.first_name,
                    ' - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ',
                    fmt.hlink(*await mention_text(message.from_user.first_name, message.from_user.id)),
                    ' -  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ',
                    message.text,
                    ' - –û—à–∏–±–∫–∞: ',
                    exception)
    await bot.send_message(db.get_group_message()[0], text, parse_mode=None)


@dp.errors_handler(exception=TypeError)
async def bot_type_error(update: types.Update, exception: TypeError):
    text = fmt.text('–ì—Ä—É–ø–ø–∞: ',
                    update.message.chat.title or update.message.chat.first_name,
                    ' - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ',
                    fmt.hlink(*await mention_text(update.message.from_user.first_name, update.message.from_user.id)),
                    ' -  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ',
                    update.message.text,
                    ' - –û—à–∏–±–∫–∞: ',
                    exception,
                    update)
    await bot.send_message(db.get_group_message()[0], text, parse_mode=None)


@dp.errors_handler(exception=ValueError)
async def bot_value_error(update: types.Update, exception: ValueError):
    text = fmt.text('–ì—Ä—É–ø–ø–∞: ',
                    update.message.chat.title or update.message.chat.first_name,
                    ' - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ',
                    fmt.hlink(*await mention_text(update.message.from_user.first_name, update.message.from_user.id)),
                    ' -  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ',
                    update.message.text,
                    ' - –û—à–∏–±–∫–∞: ',
                    exception,
                    update)
    await bot.send_message(db.get_group_message()[0], text, parse_mode=None)


@dp.errors_handler(exception=IndexError)
async def bot_index_error(update: types.Update, exception: IndexError):
    text = fmt.text('–ì—Ä—É–ø–ø–∞: ',
                    update.message.chat.title or update.message.chat.first_name,
                    ' - –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä: ',
                    fmt.hlink(*await mention_text(update.message.from_user.first_name, update.message.from_user.id)),
                    ' -  —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ',
                    update.message.text,
                    ' - –û—à–∏–±–∫–∞: ',
                    exception)
    await bot.send_message(db.get_group_message()[0], text, parse_mode=None)


if __name__ == "__main__":
    DICT_COMMANDS = {
        'owner': add_owner,
        'admin': admin_up,
        'moder': moder_up,
        'down': downgrade,
        'banned': banned,
        'ban': ban_group,
        'unbanned': unbanned,
        'unban': unban_group,
        'userrp': user_rp
    }

    executor.start_polling(dp, skip_updates=True)
    asyncio.create_task(client.run_until_disconnected())

