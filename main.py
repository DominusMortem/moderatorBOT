import asyncio
from contextlib import suppress
import logging
import re
import time
import datetime

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import (MessageCantBeDeleted, MessageToDeleteNotFound)
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

import config
from database import Database
from utils import time_check, wedding_date_now

logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()

db = Database('database.db')
bot = Bot(token=config.TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage=storage)


class Reg(StatesGroup):
    period = State()
    group_id = State()


TIMECHECK = {'–º': 60,
             'm': 60,
             'h': 3600,
             '—á': 3600}

PERSON_ONE = [0, 0]
PERSON_TWO = [0, 0]
GROUP = {}
short_commands = ['–æ–±–Ω—è—Ç—å', '–∫–∞–∑–Ω–∏—Ç—å', '–ø–æ–±–∏—Ç—å', '–ª—é–±–æ–≤—å', '–Ω–µ–¥–æ–≤–µ—Ä–∏–µ', '—Ç—É—Å–∏—Ç—å']


async def delete_message(message: types.Message, sleep_time: int = 0):
    await asyncio.sleep(sleep_time)
    with suppress(MessageCantBeDeleted, MessageToDeleteNotFound):
        await message.delete()


async def mention_text(first_name, user_id):
    return f'<a href = "tg://user?id={user_id}">{first_name}</a>'


async def ent(message: types.Message):
    ents = [entity for entity in message.entities if entity.type == 'text_mention']
    if ents:
        first_name = ents[0].user.first_name
        user_id = ents[0].user.id
    else:
        username = message.text.split()[1]
        user_id, first_name = db.get_user(message.chat.id, username[1:])
    return user_id, first_name


async def downgrade(user_id, chat_id, mention, role=0, user=0):
    print(user_id, user)
    is_owner = db.get_owner(user_id)
    is_admin = db.get_admin(chat_id, user_id)
    is_moder = db.get_moder(chat_id, user_id)
    if role == 0:
        if is_owner:
            for group in db.all_group():
                if db.user_exists(group[0], user_id):
                    await admin_private(user_id, group[0], mention, 1)
            return '–ü–æ–Ω–∏–∂–µ–Ω–æ!'
        elif is_admin:
            db.set_admin(chat_id, user_id, 0)
            db.set_moder(chat_id, user_id, 1)
            await moder_private(user_id, chat_id, mention, 1)
            return '–ü–æ–Ω–∏–∂–µ–Ω–æ!'
        elif is_moder:
            db.set_moder(chat_id, user_id, 0)
            await moder_private(user_id, chat_id, mention, 0)
            return '–ü–æ–Ω–∏–∂–µ–Ω–æ!'
        else:
            return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!'


async def admin_private(user_id, chat_id, mention, admin=0, user=0):
    db.delete_owner(user_id)
    db.set_admin(chat_id, user_id, admin)
    db.set_moder(chat_id, user_id, 0)
    if admin == 1:
        await bot.promote_chat_member(
            chat_id,
            user_id,
            can_manage_chat=True,
            can_delete_messages=True,
            can_restrict_members=True
        )
        time.sleep(1)
        await bot.set_chat_administrator_custom_title(chat_id, user_id, custom_title='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        await bot.send_message(chat_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.')
        return '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!'
    else:
        await bot.promote_chat_member(
            chat_id, user_id
        )
        await bot.send_message(chat_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
        return '–°–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏!'


async def moder_private(user_id, chat_id, mention, moder=0, user=0):
    db.set_moder(chat_id, user_id, moder)
    db.set_admin(chat_id, user_id, 0)
    if moder == 1:
        await bot.promote_chat_member(
            chat_id,
            user_id,
            can_manage_chat=True
        )
        time.sleep(1)
        await bot.set_chat_administrator_custom_title(chat_id, user_id, custom_title='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä')
        await bot.send_message(chat_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.')
        return '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!'
    else:
        await bot.promote_chat_member(
            chat_id, user_id
        )
        await bot.send_message(chat_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.')
        return '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!'


async def ban_group(user_id, chat_id, mention, ban=0, user=0):
    db.add_ban(chat_id, user_id, ban)
    if not ban:
        await bot.unban_chat_member(chat_id, user_id, only_if_banned=True)
        await bot.send_message(chat_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} —Ä–∞–∑–±–∞–Ω–µ–Ω.')
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω!'
    else:
        await bot.ban_chat_member(chat_id, user_id)
        await bot.send_message(chat_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.')
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!'


async def add_owner(user_id, chat_id, mention, owner=0, user=0):
    if user != config.ADMIN_ID:
        return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!'
    if not db.get_owner(user_id):
        db.set_owner(user_id)

    for group in db.all_group():
        group_id = int(group[0])
        if db.user_exists(group_id, user_id):
            db.set_admin(group_id, user_id, 0)
            db.set_moder(group_id, user_id, 0)
            await bot.promote_chat_member(
                group_id,
                user_id,
                can_manage_chat=True,
                can_delete_messages=True,
                can_restrict_members=True,
                can_promote_members=True,
                can_change_info=True,
                can_invite_users=True,
                can_pin_messages=True,
                can_manage_video_chats=True
            )
            time.sleep(1)
            await bot.set_chat_administrator_custom_title(group_id, user_id, custom_title='–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü')
            await bot.send_message(group_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Ç–∏!</b>')
    return '–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!'


async def add_banned(user_id, chat_id, mention, banned=0, user=0):
    if not db.get_banned(user_id):
        db.set_banned(user_id)
    for group in db.all_group():
        group_id = int(group[0])
        if db.user_exists(group_id, user_id):
            await bot.ban_chat_member(group_id, user_id)
            await bot.send_message(group_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.')
        if banned:
            db.delete_banned(user_id)
            await bot.unban_chat_member(group_id, user_id)
            await bot.send_message(group_id,
                                   f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} —Ä–∞–∑–±–∞–Ω–µ–Ω.\n')
    return '–£—Å–ø–µ—à–Ω–æ!'


async def info_message(
        command,
        chat_title,
        chat_id,
        first_name,
        user_id,
        to_first_name,
        to_user_id,
        username = None,
        to_username = None
        ):
    text = (f'#{command}\n\n'
            f'–ì—Ä—É–ø–ø–∞: {chat_title}\n'
            f'[#chat{str(chat_id)[1:]}]\n'
            f'–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: {first_name} [{username or "–ù–µ –∑–∞–¥–∞–Ω–æ"}]\n'
            f'[#user{user_id}]\n'
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {to_first_name} [{to_username  or "–ù–µ –∑–∞–¥–∞–Ω–æ"}]\n'
            f'[#user{to_user_id}]\n'
            f'–í—Ä–µ–º—è: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}')
    group_id = db.get_group_message()
    await bot.send_message(group_id[0], text)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type == 'private':
        buttons = ['–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω',
                   '–ö—É–ø–∏—Ç—å —Ä–∞–∑–≤–∞—Ä–Ω',
                   '–ö—É–ø–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å',
                   '–ö—É–ø–∏—Ç—å ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ']
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*buttons)
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n'
                             '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é:', reply_markup=keyboard)
    else:
        await message.delete()
        return


@dp.message_handler(commands=['–±—Ä–∞–∫–∏'])
async def get_pair(message: types.Message):
    dict_pair = {}
    try:
        pairs = db.get_pair(message.chat.id)
        if pairs:
            for pair in pairs:
                if pair[2] != '0':
                    user_id = str(pair[0])
                    first_name = pair[1]
                    wend = pair[2]
                    wedding_time = datetime.datetime.strptime(pair[3], "%Y-%m-%d %H:%M:%S")
                    wedding_id = pair[2].split('id=')[1].split('"')[0]
                    if wedding_id not in dict_pair:
                        dict_pair[user_id] = (wend, first_name, wedding_time)
            if dict_pair:
                text = '–ü–∞—Ä—ã –≤ –≥—Ä—É–ø–ø–µ:\n'
            else:
                text = '–õ—é–¥–µ–π –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–∞–∫ –º–∞–ª–æ, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ó–ê–ì–° –∑–∞–∫–æ–ª–æ—Ç–∏–ª –¥–≤–µ—Ä–∏...'
            for k, v in dict_pair.items():
                mention = await mention_text(v[1], k)
                day_wending = (datetime.datetime.now() - v[2]).total_seconds()
                text += f'{mention} –∏ {v[0]} –≤ –±—Ä–∞–∫–µ: {wedding_date_now(day_wending)}.\n'
            await message.answer(f'{text}')
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


@dp.message_handler(commands=['—Å–≤–∞–¥—å–±–∞'])
async def wedding(message: types.Message):
    try:
        text = message.text.split()
        if len(text) == 1:
            if not message.reply_to_message:
                await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
                return
            user_id = message.reply_to_message.from_user.id
            first_name = message.reply_to_message.from_user.first_name
        else:
            user_id, first_name = await ent(message)
        mention = await mention_text(first_name, user_id)
        mention_one = await mention_text(message.from_user.first_name, message.from_user.id)
        keyboard = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton('–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è', callback_data='YES'), types.InlineKeyboardButton('–û—Ç–∫–∞–∑–∞—Ç—å', callback_data='NO')]
        keyboard.add(*buttons)
        print(message.from_user.first_name, message.from_user.id, first_name, user_id)
        db.delete_constant(message.from_user.id)
        db.delete_constant(user_id)
        db.wedding_constaint(message.chat.id, message.from_user.first_name, message.from_user.id, first_name, user_id)
        person_one_not_wending = db.get_wedding(message.chat.id, message.from_user.id)[0]
        person_two_not_wending = db.get_wedding(message.chat.id, user_id)[0]
        if person_one_not_wending == '0' and person_two_not_wending == '0':
            msg = await message.answer(f'üíó{mention}, –º–∏–Ω—É—Ç—É –≤–Ω–∏–º–∞–Ω–∏—è!\n'
                                 f'{mention_one} —Å–¥–µ–ª–∞–ª(–∞) –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞.ü•∞', reply_markup=keyboard)
            asyncio.create_task(delete_message(msg, 120))
        else:
            if person_one_not_wending:
                msg = await message.answer(f'–£–≤—ã, {mention_one}, –≤—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ!' )
                asyncio.create_task(delete_message(msg, 3))
            if person_two_not_wending:
                msg = await message.answer(f'–£–≤—ã, {mention}, —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –±—Ä–∞–∫–µ!')
                asyncio.create_task(delete_message(msg, 3))
        to_username = db.get_username(message.chat.id, user_id)[0]
        await info_message(
            '—Å–≤–∞–¥—å–±–∞',
            message.chat.title,
            message.chat.id,
            message.from_user.first_name,
            message.from_user.id,
            first_name,
            user_id,
            message.from_user.username,
            to_username
        )
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


@dp.message_handler(commands=['—Ä–∞–∑–≤–æ–¥'])
async def no_marry(message: types.Message):
    wedding = db.get_wedding(message.chat.id, message.from_user.id)[0]
    if wedding != '0':
        mention = await mention_text(message.from_user.first_name, message.from_user.id)
        person_two = wedding.split('id=')[1].split('"')[0]
        db.wedding(message.chat.id, message.from_user.id, '0')
        db.wedding(message.chat.id, int(person_two), '0')
        msg = await message.answer(f'üíî–°–æ–∂–∞–ª–µ–µ–º {wedding}, {mention} —Ä–µ—à–∏–ª(–∞) —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –º–µ–∂–¥—É –≤–∞–º–∏.')
        asyncio.create_task(delete_message(msg, 10))
    await message.delete()


@dp.callback_query_handler(lambda m: m.data in ['YES', 'NO'])
async def wedding_answer(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    person_first_name, person_id, person_two_first_name, person_two_id = db.get_wedding_const(callback_query.from_user.id, callback_query.message.chat.id)
    mention_one = await mention_text(person_first_name, person_id)
    mention_two = await mention_text(person_two_first_name, person_two_id)
    if callback_query.from_user.id == person_two_id:
        if callback_query.data == 'YES':
            msg = await bot.send_message(callback_query.message.chat.id, f'üíñ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –º–æ–ª–æ–¥–æ–∂—ë–Ω–æ–≤!\n'
                                                                   f'{mention_one} –∏ {mention_two} —Ç–µ–ø–µ—Ä—å –≤ –±—Ä–∞–∫–µ.üíç')
            await callback_query.message.delete()
            asyncio.create_task(delete_message(msg, 20))
            db.wedding(callback_query.message.chat.id, person_id, mention_two)
            db.wedding(callback_query.message.chat.id, person_two_id, mention_one)
        if callback_query.data == 'NO':
            msg = await bot.send_message(callback_query.message.chat.id,
                                   f'{mention_one}, —Å–æ–∂–∞–ª–µ—é, {mention_two} –≤–∞–º –æ—Ç–∫–∞–∑–∞–ª(–∞).üíî')
            await callback_query.message.delete()
            asyncio.create_task(delete_message(msg, 20))



@dp.message_handler(commands=['info'])
async def info(message: types.Message):
    if not message.chat.type == 'private':
        try:
            if len(message.text.split()) >= 2:
                from_id = message.from_user.id
                chat_id = message.chat.id
                is_owner = db.get_owner(from_id)
                is_admin = db.get_admin(chat_id, from_id)
                is_moder = db.get_moder(chat_id, from_id)
                if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
                    return
                user_id, first_name = await ent(message)
                data = db.show_info(message.chat.id, user_id)
                mention = await mention_text(first_name, user_id)
            else:
                data = db.show_info(message.chat.id, message.from_user.id)
                mention = await mention_text(message.from_user.first_name, message.from_user.id)
                user_id = message.from_user.id
            if not data[6]:
                wedding = '–ù–µ –∂–µ–Ω–∞—Ç/–ù–µ –∑–∞–º—É–∂–µ–º'
            else:
                wedding = data[6]

            text = (f'–ù–∏–∫–Ω–µ–π–º: @{data[2] or "–ù–µ –∑–∞–¥–∞–Ω–æ"}\n'
                    f'–ü—Ä–æ—Ñ–∏–ª—å: {mention}\n'
                    f'Id: {user_id}\n\n'
                    f'–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞: {data[3]}\n'
                    f'–†–∞–Ω–≥: {data[16]}\n'
                    f'–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {wedding}\n'
                    f'ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ: {data[14]}\n'
                    f'–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {data[4]}\n'
                    f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–Ω: {data[8] or "–ù–µ –±—ã–ª–æ"}\n'
                    f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–µ–¥–Ω–∏–µ: {data[10] or "–ù–µ –±—ã–ª–æ"}\n'
                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {data[11] or "–ù–µ –±—ã–ª–æ"}\n'
                    f'–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {data[5]}\n'
                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {data[17]}\n'
                    f'–û–ø—ã—Ç: {data[18]}\n'
                    f'–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {data[12] or "–ù–µ –±—ã–ª–æ"}\n'
                    )
            await message.answer(text)
        except Exception as e:
            logging.info(e)
        finally:
            await message.delete()


@dp.message_handler(content_types=['new_chat_members']) # –í–æ—à–µ–ª
async def user_joined(message: types.Message):
        if message.new_chat_members[0].username == 'gamemoder_bot':
            db.create_table(message.chat.id, message.chat.title)
            db.add_user(message.chat.id, message.from_user.id, message.from_user.username, message.from_user.first_name, 1)
        else:
            try:
                for user in message.new_chat_members:
                    mention = await mention_text(user.first_name, user.id)
                    if not db.user_exists(message.chat.id, message.from_user.id):
                        db.add_user(message.chat.id, user.id, user.username, user.first_name, 1)
                    else:
                        db.active(message.chat.id, user.id, 0)
                    if user.is_bot:
                        db.set_banned(user.id)
                        await bot.ban_chat_member(message.chat.id, user.id)
                        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –ë–æ—Ç.')
                        return
                    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {mention}!')
                    if db.get_owner(user.id):
                        await bot.promote_chat_member(
                            message.chat.id,
                            user.id,
                            can_manage_chat=True,
                            can_delete_messages=True,
                            can_restrict_members=True
                        )
                        await bot.set_chat_administrator_custom_title(message.chat.id, user.id, custom_title='–°–æ–≤–ª–∞–¥–µ–ª–µ—Ü')
                        await message.answer(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Ç–∏!</b>')
                    if db.get_banned(user.id):
                        await bot.ban_chat_member(message.chat.id, user.id)
                        await bot.send_message(
                            message.chat.id,
                            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.'
                        )
            except Exception as e:
                logging.info(e)
            finally:
                await message.delete()


@dp.message_handler(content_types=["left_chat_member"]) # –í—ã—à–µ–ª
async def on_user_exit(message: types.Message):
    db.active(message.chat.id, message.left_chat_member.id, 0)
    await message.delete()


@dp.message_handler(commands=['set_owner']) # /set_owner
async def set_owner(message: types.Message):
    try:
        if message.chat.id == config.ADMIN_ID and message.chat.type == 'private':
            db.set_owner(message.chat.id)
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


@dp.message_handler(commands=['ban'])
async def ban(message: types.Message):
    try:
        text = message.text.split()
        from_id = message.from_user.id
        chat_id = message.chat.id
        is_owner = db.get_owner(from_id)
        is_admin = db.get_admin(chat_id, from_id)
        is_moder = db.get_moder(chat_id, from_id)
        if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
            return
        user_id, first_name = await ent(message)
        is_owner_user = db.get_owner(user_id)
        is_admin_user = db.get_admin(chat_id, user_id)
        is_moder_user = db.get_moder(chat_id, user_id)
        if user_id == config.ADMIN_ID:
            msg = await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_moder and any([is_moder_user, is_admin_user, is_owner_user]):
            msg = await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_admin and any([is_owner_user, is_admin_user]):
            msg = await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_owner and is_owner_user:
            msg = await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        else:
            mention = await mention_text(first_name, user_id)
            db.add_ban(message.chat.id, user_id, text[-1])
            if text[-1] == '1':
                await bot.ban_chat_member(message.chat.id, user_id)
                msg = await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.')
            else:
                await bot.unban_chat_member(message.chat.id, user_id, only_if_banned=True)
                msg = await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} —Ä–∞–∑–±–∞–Ω–µ–Ω.')
        asyncio.create_task(delete_message(msg, 3))
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


@dp.message_handler(commands=['id'])
async def id(message: types.Message):
    db.delete_constant(message.from_user.id)
    try:
        text = message.text.split()
        from_id = message.from_user.id
        chat_id = message.chat.id
        is_owner = db.get_owner(from_id)
        is_admin = db.get_admin(chat_id, from_id)
        # is_moder = db.get_moder(chat_id, from_id)
        if not any([is_owner, is_admin]) and config.ADMIN_ID != from_id:
            return
        buttons = []
        if is_owner or from_id == config.ADMIN_ID:
            if from_id == config.ADMIN_ID:
                buttons.append('–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–º')
            buttons.extend(
                [
                    '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                    '–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–µ—Ä–æ–º',
                    '–ü–æ–Ω–∏–∑–∏—Ç—å',
                    '–ó–∞–±–∞–Ω–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ',
                    '–ó–∞–±–∞–Ω–∏—Ç—å –≤ —Å–µ—Ç–∏',
                    '–†–∞–∑–±–∞–Ω–∏—Ç—å –≤ —Å–µ—Ç–∏',
                    '–†–∞–∑–±–∞–Ω–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ'
                ]
            )
        if is_admin:
            buttons = ['–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–µ—Ä–æ–º',
                       '–ü–æ–Ω–∏–∑–∏—Ç—å',
                       '–ó–∞–±–∞–Ω–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ',
                       '–ó–∞–±–∞–Ω–∏—Ç—å –≤ —Å–µ—Ç–∏',
                       '–†–∞–∑–±–∞–Ω–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ']
        chat_id = message.chat.id
        if len(text) == 1:
            if message.reply_to_message is None:
                return await message.delete()

            user_id = message.reply_to_message.from_user.id
            first_name = message.reply_to_message.from_user.first_name
        else:
            user_id, first_name = await ent(message)
        mention = await mention_text(first_name, user_id)
        db.user_contain(message.from_user.id, user_id, chat_id, mention)
        is_owner_user = db.get_owner(user_id)
        is_admin_user = db.get_admin(chat_id, user_id)
        is_moder_user = db.get_moder(chat_id, user_id)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(*buttons)
        if user_id == config.ADMIN_ID:
            msg = await bot.send_message(message.from_user.id, '–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞!')
            return
        elif message.from_user.id == config.ADMIN_ID:
            msg = await bot.send_message(message.from_user.id, '–í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
        elif is_owner and not is_owner_user:
            msg = await bot.send_message(message.from_user.id, '–í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
        elif is_admin and not any([is_owner_user, is_admin_user]):
            msg = await bot.send_message(message.from_user.id, '–í—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)
        else:
            msg = await bot.send_message(message.from_user.id, '–ü—Ä–∞–≤ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!')
        asyncio.create_task(delete_message(msg, 3))
    except Exception as e:
        logging.info(e)
        db.delete_constant(message.from_user.id)
    finally:
        await message.delete()


@dp.message_handler(commands=['set_admin']) # /set_admin <username> 1 or 0
async def set_admin(message: types.Message):
    try:
        from_id = message.from_user.id
        chat_id = message.chat.id
        is_owner = db.get_owner(from_id)
        is_admin = db.get_admin(chat_id, from_id)
        is_moder = db.get_moder(chat_id, from_id)
        if not any([is_owner, is_admin]) and config.ADMIN_ID != from_id:
            return
        text = message.text.split()
        chat_id = message.chat.id
        if message.from_user.id == config.ADMIN_ID:
            if len(text) == 2:
                if not message.reply_to_message:
                    await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
                    return

                user_id = message.reply_to_message.from_user.id
                first_name = message.reply_to_message.from_user.first_name
            else:
                user_id, first_name = await ent(message)
            is_owner_user = db.get_owner(user_id)
            is_admin_user = db.get_admin(chat_id, user_id)
            is_moder_user = db.get_moder(chat_id, user_id)
            if user_id == config.ADMIN_ID:
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
                return
            elif is_moder:
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
                return
            elif is_admin:
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
                return
            elif is_owner and is_owner_user:
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
                return
            else:
                mention = await mention_text(first_name, user_id)
                db.set_admin(message.chat.id, user_id, text[-1])
                if db.get_admin(message.chat.id, user_id):
                    await bot.promote_chat_member(
                        chat_id,
                        user_id,
                        can_manage_chat=True,
                        can_delete_messages=True,
                        can_restrict_members=True
                    )
                    time.sleep(5)
                    await bot.set_chat_administrator_custom_title(chat_id, user_id, custom_title='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
                    await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.')
                else:
                    await bot.promote_chat_member(
                        chat_id, user_id
                    )
                    await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


@dp.message_handler(commands=['tagall'])
async def tag(message: types.Message):
    try:
        from_id = message.from_user.id
        chat_id = message.chat.id
        is_owner = db.get_owner(from_id)
        is_admin = db.get_admin(chat_id, from_id)
        is_moder = db.get_moder(chat_id, from_id)
        if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
            return
        text = message.text.split()
        if len(text) >= 2:
            for user_id, first_name in db.select_all(message.chat.id):
                mention = await mention_text(first_name, user_id)
                response = f'{" ".join(text[1:])}\n'
                response += f'{mention} '
                msg = await message.answer(response)
                asyncio.create_task(delete_message(msg, 3))
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


"""@dp.message_handler(commands=['stop'], state='*')
async def cancel(message: types.Message,  state=FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()"""


@dp.message_handler(commands=['set_moder']) # /set_moder <username> 1 or 0
async def set_moder(message: types.Message):
    try:
        from_id = message.from_user.id
        chat_id = message.chat.id
        is_owner = db.get_owner(from_id)
        is_admin = db.get_admin(chat_id, from_id)
        is_moder = db.get_moder(chat_id, from_id)
        if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
            return
        text = message.text.split()
        chat_id = message.chat.id
        if message.from_user.id == config.ADMIN_ID:
            if len(text) == 2:
                if not message.reply_to_message:
                    await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
                    return

                user_id = message.reply_to_message.from_user.id
                first_name = message.reply_to_message.from_user.first_name
            else:
                user_id, first_name = await ent(message)
            is_owner_user = db.get_owner(user_id)
            is_admin_user = db.get_admin(chat_id, user_id)
            is_moder_user = db.get_moder(chat_id, user_id)
            if user_id == config.ADMIN_ID:
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
                return
            elif is_moder:
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
                return
            elif is_admin and any([is_owner_user, is_admin_user]):
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
                return
            elif is_owner and is_owner_user:
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
                return
            else:
                mention = await mention_text(first_name, user_id)
                db.set_moder(message.chat.id, user_id, text[-1])
                if db.get_moder(message.chat.id, user_id):
                    await bot.promote_chat_member(
                        chat_id,
                        user_id,
                        can_manage_chat=True,
                    )
                    time.sleep(5)
                    await bot.set_chat_administrator_custom_title(chat_id, user_id, custom_title='–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä')
                    await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.')
                else:
                    await bot.promote_chat_member(
                        chat_id, user_id
                    )
                    await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} —Å–Ω—è—Ç —Å –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.')
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


@dp.message_handler(commands=['add_money']) # /add_money @username 1000
async def add_money(message: types.Message):
    text = message.text.split()
    try:
        from_id = message.from_user.id
        chat_id = message.chat.id
        is_owner = db.get_owner(from_id)
        if not any([is_owner,]) and config.ADMIN_ID != from_id:
            return
        if len(text) >= 3:
            user_id, first_name = await ent(message)
        else:
            if not message.reply_to_message:
                await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
                return

            user_id = message.reply_to_message.from_user.id
            first_name = message.reply_to_message.from_user.first_name
        if abs(int(text[-1])) > 1000000000:
            await message.answer(f'–ß–∏—Å–ª–æ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ä–∞–∑—É–º–Ω–æ–≥–æ!')
            return
        db.add_money(message.chat.id, user_id, int(text[-1]))
        mention = await mention_text(first_name, user_id)
        if int(text[-1]) > 0:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {mention} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {text[-1]} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ') #–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõüí†
        else:
            await message.answer(
                f'–í–æ –≤—Ä–µ–º—è –Ω–∞–ª–æ–≥–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —É {mention} –∏–∑—å—è–ª–∏ {text[-1]} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ')  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõüí†
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


@dp.message_handler(commands='setting')
async def setting(message: types.Message):
    if message.chat.type != 'private':
        await message.delete()
        return
    try:
        from_id = message.from_user.id
        is_owner = db.get_owner(from_id)
        if not any([is_owner]) and config.ADMIN_ID != from_id:
            return
        if not db.setting():
            db.create_setting()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        buttons = ['–í–∞–ª—é—Ç–∞', '–û–ø—ã—Ç', '–ò–Ω—Ñ–æ–≥—Ä—É–ø–ø–∞']
        keyboard.add(*buttons)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=keyboard)
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


def key_setting():
    keyboard = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton('+', callback_data='+'), types.InlineKeyboardButton('-', callback_data='-')]
    keyboard.add(*buttons)
    return keyboard


def key_setting_exp():
    keyboard = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton('+', callback_data='+exp'), types.InlineKeyboardButton('-', callback_data='-exp')]
    keyboard.add(*buttons)
    return keyboard


def key_setting_group(groups):
    keyboard = types.InlineKeyboardMarkup()
    for group in groups:
        GROUP[group[0]] = GROUP.get(group[0], group[1])
        keyboard.add(types.InlineKeyboardButton(f'{group[1]}', callback_data=group[0]))
    return keyboard


@dp.message_handler(lambda m: m.text == '–í–∞–ª—é—Ç–∞')
async def cash(message: types.Message):
    if message.chat.type != 'private':
        return
    from_id = message.from_user.id
    is_owner = db.get_owner(from_id)
    if is_owner or config.ADMIN_ID == from_id:
        money = db.get_money_game()[0]
        msg = await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã –∑–∞ –ø–æ–±–µ–¥—É –≤ –∏–≥—Ä–µ: {money}', reply_markup=key_setting())
        asyncio.create_task(delete_message(msg, 30))
    else:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        return



@dp.message_handler(lambda m: m.text == '–û–ø—ã—Ç')
async def exp(message: types.Message):
    if message.chat.type != 'private':
        return
    from_id = message.from_user.id
    is_owner = db.get_owner(from_id)
    if is_owner or config.ADMIN_ID == from_id:
        exp = db.get_exp_message()[0]
        msg = await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {exp}', reply_markup=key_setting_exp())
        asyncio.create_task(delete_message(msg, 30))
    else:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        return


@dp.message_handler(lambda m: m.text == '–ò–Ω—Ñ–æ–≥—Ä—É–ø–ø–∞')
async def exp(message: types.Message):
    if message.chat.type != 'private':
        return
    from_id = message.from_user.id
    is_owner = db.get_owner(from_id)
    if is_owner or config.ADMIN_ID == from_id:
        group = db.all_group()
        msg = await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.', reply_markup=key_setting_group(group))
        asyncio.create_task(delete_message(msg, 30))
    else:
        await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
        return


@dp.callback_query_handler(lambda m: 'exp' in m.data)
async def set_money_game(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    exp = db.get_exp_message()[0]
    if callback_query.data[0] == '+':
        exp += 1
    if exp > 0 and callback_query.data[0] == '-':
        exp -= 1
    db.set_exp_message(exp)
    msg = await bot.edit_message_text(
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {exp}',
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=key_setting_exp()
    )
    asyncio.create_task(delete_message(msg, 30))


@dp.callback_query_handler(lambda m: m.data in '+-')
async def set_money_game(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    money = db.get_money_game()[0]
    if callback_query.data == '+':
        money += 1
    if money > 0 and callback_query.data == '-':
        money -= 1
    db.set_money_game(money)
    msg = await bot.edit_message_text(
        f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã –∑–∞ –ø–æ–±–µ–¥—É –≤ –∏–≥—Ä–µ: {money}',
        callback_query.message.chat.id,
        callback_query.message.message_id,
        reply_markup=key_setting()
    )
    asyncio.create_task(delete_message(msg, 30))


@dp.callback_query_handler(lambda m: m.data.startswith('-100'))
async def set_money_game(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    db.set_group_message(callback_query.data)
    msg = await bot.edit_message_text(
        f'–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {GROUP[callback_query.data]}',
        callback_query.message.chat.id,
        callback_query.message.message_id
    )
    asyncio.create_task(delete_message(msg, 30))


@dp.message_handler(commands=['mute']) # /mute <username> 1m or 1h  reason
async def mute(message: types.Message):
    from_id = message.from_user.id
    chat_id = message.chat.id
    is_owner = db.get_owner(from_id)
    is_admin = db.get_admin(chat_id, from_id)
    is_moder = db.get_moder(chat_id, from_id)
    if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
        return
    try:
        text = message.text.split()
        if len(text) == 3:
            if not message.reply_to_message:
                await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
                return
            user_id = message.reply_to_message.from_user.id
            first_name = message.reply_to_message.from_user.first_name
        else:
            user_id, first_name = await ent(message)
        is_owner_user = db.get_owner(user_id)
        is_admin_user = db.get_admin(chat_id, user_id)
        is_moder_user = db.get_moder(chat_id, user_id)
        if user_id == config.ADMIN_ID:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_moder and any([is_moder_user, is_admin_user, is_owner_user]):
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_admin and any([is_owner_user, is_admin_user]):
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        elif is_owner and is_owner_user:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')
            return
        else:
            mention = await mention_text(first_name, user_id)
            mute_sec = int(text[-2][:-1])
            end = text[-2][-1]
            ending = time_check(end, mute_sec)
            await bot.restrict_chat_member(message.chat.id, user_id, until_date=int(time.time())+mute_sec*TIMECHECK.get(end, 1))
            mute_db = db.mute(message.chat.id, user_id) + 1
            db.add_mute(message.chat.id, user_id, mute_db, ' '.join(text[-2:]))
            if mute_db >= 25:
                db.add_ban(message.chat.id, user_id, 1)
                await bot.ban_chat_member(message.chat.id, user_id)
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª.')
            else:
                await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {mute_sec} {ending}.\n–ü—Ä–∏—á–∏–Ω–∞: {text[-1]}\n–ù–∞—Ä—É—à–µ–Ω–∏–π: {mute_db}')
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


@dp.message_handler(commands=['help'])
async def mute(message: types.Message):
    if message.chat.type != 'private':
        return
    try:
        from_id = message.from_user.id
        chat_id = message.chat.id
        is_owner = db.get_owner(from_id)
        is_admin = db.get_admin(chat_id, from_id)
        is_moder = db.get_moder(chat_id, from_id)
        if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
            return
        text = (f'–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n'
                f'<code>/info (–Ω–∏–∫–Ω–µ–π–º) </code> - –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n\n'
                f'<code>/ban (–Ω–∏–∫–Ω–µ–π–º) (1/0)</code> - –ø–∞—Ä–∞–º–µ—Ç—Ä 1 –≤—ã–¥–∞–µ—Ç –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, 0 - —Å–Ω–∏–º–∞–µ—Ç.\n\n'
                f'<code>/id (–Ω–∏–∫–Ω–µ–π–º) </code> - –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.\n\n'
                f'<code>/set_admin (–Ω–∏–∫–Ω–µ–π–º) (1/0)</code> - –ø–∞—Ä–∞–º–µ—Ç—Ä 1 –≤—ã–¥–∞–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, 0 - —Å–Ω–∏–º–∞–µ—Ç.\n\n'
                f'<code>/set_moder (–Ω–∏–∫–Ω–µ–π–º) (1/0)</code> - –ø–∞—Ä–∞–º–µ—Ç—Ä 1 –≤—ã–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, 0 - —Å–Ω–∏–º–∞–µ—Ç.\n\n'
                f'<code>/tagall —Ç–µ–∫—Å—Ç (1/0)</code> - —Ç–µ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º\n\n'
                f'<code>/add_money (–Ω–∏–∫–Ω–µ–π–º) (–∫–æ–ª-–≤–æ)</code> - –¥–æ–±–∞–≤–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã.\n\n'
                f'<code>/mute (–Ω–∏–∫–Ω–µ–π–º) (–≤—Ä–µ–º—è) (–ø—Ä–∏—á–∏–Ω–∞) </code> - –¥–∞–µ—Ç –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —É–∫–∞–∑–∞–Ω–æ–µ –∫–æ–ª-–≤–æ –≤—Ä–µ–º–µ–Ω–∏\n\n'
                f'<code>/unmute (–Ω–∏–∫–Ω–µ–π–º)</code> - —Å–Ω–∏–º–∞–µ—Ç –º—É—Ç')
        await message.answer(text)
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


@dp.message_handler(commands=['unmute'])
async def mute(message: types.Message):
    try:
        from_id = message.from_user.id
        chat_id = message.chat.id
        is_owner = db.get_owner(from_id)
        is_admin = db.get_admin(chat_id, from_id)
        is_moder = db.get_moder(chat_id, from_id)
        if not any([is_owner, is_admin, is_moder]) and config.ADMIN_ID != from_id:
            return
        text = message.text.split()
        if len(text) == 1:
            if not message.reply_to_message:
                await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
                return
            user_id = message.reply_to_message.from_user.id
            first_name = message.reply_to_message.from_user.first_name
        else:
            user_id, first_name = await ent(message)
        mention = await mention_text(first_name, user_id)
        await bot.restrict_chat_member(message.chat.id, user_id, permissions=types.ChatPermissions(True,True,True,True,True,True,True,True))
        await message.answer(f'C –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mention} —Å–Ω—è—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è.')
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


@dp.message_handler(lambda m: m.text.lower() in short_commands) # –¥–µ–π—Å—Ç–≤–∏—è
async def test(message: types.Message):
    if not message.reply_to_message:
        await message.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
        return
    person_one = await mention_text(message.from_user.first_name, message.from_user.id)
    person_two = await mention_text(message.reply_to_message.from_user.first_name, message.reply_to_message.from_user.id)
    if message.text.lower() == '–æ–±–Ω—è—Ç—å':
        text = f'{person_one} –æ–±–Ω—è–ª {person_two}'
    elif message.text.lower() == '–∫–∞–∑–Ω–∏—Ç—å':
        text = f'{person_one} –∫–∞–∑–Ω–∏–ª {person_two}'
    elif message.text.lower() == '–ø–æ–±–∏—Ç—å':
        text = f'{person_one} –ø–æ–±–∏–ª {person_two}'
    elif message.text.lower() == '–ª—é–±–æ–≤—å':
        text = f'{person_one} –ø—Ä–∏–∑–Ω–∞–ª—Å—è –≤ –ª—é–±–≤–∏ {person_two}'
    elif message.text.lower() == '–Ω–µ–¥–æ–≤–µ—Ä–∏–µ':
        text = f'{person_one} –Ω–µ–¥–æ–≤–µ—Ä—è–µ—Ç {person_two}'
    else:
        text = f'{person_one} —Ç—É—Å–∏—Ç —Å {person_two}'
    await message.answer(text)


async def add_mute(chat_id, first_name, user_id, times, reason):
    await bot.restrict_chat_member(chat_id, user_id,
                                   until_date=int(time.time()) + int(times[:-1]) * TIMECHECK.get(times[-1], 1))
    mute_db = db.mute(chat_id, user_id) + 1
    db.add_mute(chat_id, user_id, mute_db, f'{times} {reason}')
    mention = await mention_text(first_name, user_id)
    await bot.send_message(
        chat_id,
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {times[:-1]} {time_check(times[-1], int(times[:-1]))}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–ù–∞—Ä—É—à–µ–Ω–∏–π: {mute_db}'
    )


@dp.message_handler(lambda m: m.text == '–ö—É–ø–∏—Ç—å —Ä–∞–∑–±–∞–Ω')
async def unban(message: types.Message):
    if message.chat.type != 'private':
        await message.delete()
        return
    keyboard = await group_keyboard(message.chat.id, 'unban')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', reply_markup=keyboard)


@dp.message_handler(lambda m: m.text == '–ö—É–ø–∏—Ç—å —Ä–∞–∑–≤–∞—Ä–Ω')
async def unwarn(message: types.Message):
    if message.chat.type != 'private':
        await message.delete()
        return
    keyboard = await group_keyboard(message.chat.id, 'unwarn')
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', reply_markup=keyboard)


@dp.message_handler(lambda m: m.text == '–ö—É–ø–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å')
async def prefix(message: types.Message):
    if message.chat.type != 'private':
        await message.delete()
        return

    keyboard = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton('–ù–∞ 3 –¥–Ω—è', callback_data='3day'),
               types.InlineKeyboardButton('–ù–∞ –Ω–µ–¥–µ–ª—é', callback_data='week')]
    keyboard.add(*buttons)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:', reply_markup=keyboard)


async def group_keyboard(user_id, command):
    groups = db.all_group()
    buttons = []
    for group in groups:
        if db.user_exists(group[0], user_id):
            if command == 'prefix':
                buttons.append(types.InlineKeyboardButton(group[1], callback_data=f'p{group[0]}'))
            elif command == 'unban':
                buttons.append(types.InlineKeyboardButton(group[1], callback_data=f'b{group[0]}'))
            else:
                buttons.append(types.InlineKeyboardButton(group[1], callback_data=f'w{group[0]}'))
    return types.InlineKeyboardMarkup().add(*buttons)


@dp.callback_query_handler(lambda m: m.data in ['3day', 'week'])
async def prefix_buy(callback_query: types.CallbackQuery):
    try:
        await bot.answer_callback_query(callback_query.id)
        if callback_query.data == '3day':
            db.period_contain(user_id=callback_query.from_user.id, price=50, period=3)
        else:
            db.period_contain(user_id=callback_query.from_user.id, price=100, period=7)
        keyboard = await group_keyboard(callback_query.message.chat.id, command='prefix')
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:', reply_markup=keyboard)
    except Exception as e:
        db.delete_constant(callback_query.message.from_user.id)
        logging.info(e)
    finally:
        await callback_query.message.delete()


@dp.callback_query_handler(lambda m: m.data.startswith('b-100'))
async def unban_cash(callback_query: types.CallbackQuery):
    chat_id = callback_query.data[1:]
    if db.cash_db(chat_id, callback_query.from_user.id) >= 200:
        db.add_money(chat_id, callback_query.from_user.id, -200)
        db.add_ban(chat_id, callback_query.from_user.id, 0)
        await callback_query.message.answer('–£—Å–ø–µ—à–Ω–æ!')
    else:
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'


@dp.callback_query_handler(lambda m: m.data.startswith('w-100'))
async def warn_cash(callback_query: types.CallbackQuery):
    chat_id = callback_query.data[1:]
    if db.cash_db(chat_id, callback_query.from_user.id) >= 100:
        db.add_money(chat_id, callback_query.from_user.id, -100)
        text = db.unwarn(chat_id, callback_query.from_user.id, 5)
        await callback_query.message.answer(f'{text or "–£—Å–ø–µ—à–Ω–æ!"}')
    else:
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤'



@dp.callback_query_handler(lambda m: m.data.startswith('p-100'))
async def set_group(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    try:
        chat_id = callback_query.data[1:]
        db.period_contain(chat_id=chat_id, user_id=callback_query.from_user.id)
        price, x, y = db.period_contain(user_id=callback_query.from_user.id, params=1)
        if db.cash_db(chat_id, callback_query.from_user.id) >= price:
            await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –ø—Ä–µ—Ñ–∏–∫—Å, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π 16 —Å–∏–º–≤–æ–ª–æ–≤.\n'
                                                '–ó–∞ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–∞–Ω!\n\n'
                                                '–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥ –ø—Ä–µ—Ñ–∏–∫—Å–∞ —Å "!" ("!–ü—Ä–µ—Ñ–∏–∫—Å")')
        else:
            await callback_query.message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
            db.delete_constant(callback_query.message.from_user.id)
    except Exception as e:
        db.delete_constant(callback_query.message.from_user.id)
        logging.info(e)
    finally:
        await callback_query.message.delete()


@dp.message_handler(commands=['money'])
async def money_user(message: types.Message):
    try:
        cash = db.cash_db(message.chat.id, message.from_user.id)
        text = f'–ë–∞–ª–∞–Ω—Å: {cash} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n'
        mention = await mention_text(message.from_user.first_name, message.from_user.id)
        if cash <= 0:
            text += f'{mention}, –Ω–∞—Å –æ–≥—Ä–∞–±–∏–ª–∏, –º–∏–ª–æ—Ä–¥!'
        elif cash <= 100:
            text += f'–ù—É –Ω–∞–∫–æ–Ω–µ—Ü {mention} –º–æ–∂–µ—Ç –Ω–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ —Å–µ–±–µ! –ß–µ–±—É—Ä–µ–∫ –Ω–∞ –≤—Å–µ!!!'
        elif cash <= 1000:
            text += f'{mention}, –µ—â—ë –ø–æ–¥–∫–æ–ø–∏—Ç—å –∏ –Ω–∞ –ö–∞–Ω–∞—Ä—ã...'
        else:
            text += f'{mention}, —Ç–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∏–∫–æ–º—É –Ω–µ–ª—å–∑—è –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å!'
        await message.answer(text)
    except Exception as e:
        logging.info(e)
    finally:
        await message.delete()


@dp.message_handler(lambda m: m.text.startswith('!'))
async def prefix_sets(message: types.Message):
    if not db.check_constaints:
        return
    price, period, chat_id = db.period_contain(user_id=message.from_user.id, params=1)
    try:
        if len(message.text[1:]) > 16:
            await message.answer('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å! –í–≤–µ–¥–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 16 —Å–∏–º–≤–æ–ª–æ–≤!')
        elif message.text[1:] in config.WORDS:
            await message.answer('–ü—Ä–µ—Ñ–∏–∫—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
        else:
            await bot.promote_chat_member(
                chat_id,
                message.from_user.id,
                can_manage_chat=True
            )
            time.sleep(10)
            await bot.set_chat_administrator_custom_title(chat_id, message.from_user.id, custom_title=message.text[1:])
            db.add_money(chat_id, message.from_user.id, int(f'-{price}'))
            dates = db.set_period(chat_id, message.from_user.id, period)
            await message.answer(f'–í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å <b>{message.text[1:]}</b>\n –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {dates}')
    except Exception as e:
        await bot.promote_chat_member(
            chat_id,
            message.from_user.id,
            can_manage_chat=False
        )
        logging.info(e)
    finally:
        db.delete_constant(message.from_user.id)
        await message.delete()


@dp.message_handler(lambda m: m.text == '–ö—É–ø–∏—Ç—å ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ')
async def coins(message: types.Message):
    owners = db.owners()
    text = ''
    for owner in owners:
        mention = await mention_text('–í–ª–∞–¥–µ–ª–µ—Ü', owner[0])
        text += f'{mention}\n'
    await message.answer(f'–î–ª—è –ø–æ–∫—É–ø–∫–∏ ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å\n{text}')


@dp.message_handler()
async def mess_handler(message: types.Message):
    if message.chat.type == 'private':
        text = message.text
        if text in DICT_COMMANDS:
            print(db.user_contain(user_id=message.from_user.id, read=1))
            from_id, chat_id, mention = db.user_contain(user_id=message.from_user.id, read=1)
            if '–ü–æ–Ω–∏–∑–∏—Ç—å' in text or '–ó–∞–±–∞–Ω–∏—Ç—å' in text:
                role = 0
            else:
                role = 1
            answer = await DICT_COMMANDS[text](from_id, chat_id, mention, role, message.from_user.id)
            msg = await message.answer(answer, reply_markup=types.ReplyKeyboardRemove())
            asyncio.create_task(delete_message(msg, 3))
        await message.delete()
        return

    if not db.user_exists(message.chat.id, message.from_user.id):
        db.add_user(message.chat.id, message.from_user.id, message.from_user.username, message.from_user.first_name, 1)
    print(message)
    text = message.text
    from_id = message.from_user.id
    chat_id = message.chat.id
    is_owner = db.get_owner(from_id)
    is_admin = db.get_admin(chat_id, from_id)
    is_moder = db.get_moder(chat_id, from_id)
    if db.check_flood(chat_id, text, from_id):
        if not any([is_owner, is_admin, is_moder]) or config.ADMIN_ID != from_id:
            await add_mute(chat_id, message.from_user.first_name, from_id, '30m', '–§–ª—É–¥')
    db.add_time_message(chat_id, from_id)


    winners = ''
    if '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞' in text:
        if message.from_user.id == 1634167847 or message.forward_from.id == 1634167847:
            text = text.partition('–î—Ä—É–≥–∏–µ:')[0]
            winners = list([x for _,x in re.findall(r'(\d.\s.(.*?)\s-)', text)])
        elif message.from_user.id == 1044037207 or message.forward_from.id == 1044037207:
            text = text.partition('–î—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')[0]
            winners = list([x for _, x in re.findall(r'(\d.\s(.*?)\s-)', text)])
        else:
            text = text.partition('–û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:')[0]
            winners = list([x for _, x in re.findall(r'(\s{4}(.*?)\s-)', text)])
    if winners:
        count = 0
        text_winners = '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!'
        for entity in message.entities:
            if entity.type == 'text_mention' and db.user_exists(message.chat.id, entity.user.id):
                if count == len(winners):
                    break
                money = db.get_money_game()[0]
                db.add_money(message.chat.id, entity.user.id, money)
                mention = await mention_text(entity.user.first_name, entity.user.id)
                text_winners += f'{mention} - {money} ùêπùëôùëéùëöùëí ùê∂ùëúùëñùëõ üíÆ\n'
                count += 1
        await message.answer(text_winners)

    if '–Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª –≥–Ω–µ—Ç—É—â–µ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã' in text:
        for entity in message.entities:
            if entity.type == 'text_mention' and db.user_exists(message.chat.id, entity.user.id):
                await add_mute(message.chat.id, entity.user.first_name, entity.user.id, '30m', '–í—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã')
    if '—Å–ø–∞—Ç—å –≤–æ –≤—Ä–µ–º—è' in text:
        for entity in message.entities:
            if entity.type == 'text_mention' and db.user_exists(message.chat.id, entity.user.id):
                await add_mute(message.chat.id, entity.user.first_name, entity.user.id, '30m', '–ê–§–ö')

    for word in config.WORDS:
        if word in text.lower():
            await message.delete()

    for entity in message.entities:
        if entity.type in ["url", "text_link"] and not any([is_owner, is_admin, is_moder]):
            await bot.send_message(
                message.from_user.id,
                "E—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ —Å–æ —Å–≤–æ–µ–π —Ä–µ–∫–ª–∞–º–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @admin"
            )
            await message.delete()
    if db.delete_prefix(message.chat.id, message.from_user.id) and not any([is_owner, is_admin, is_moder]):
        await bot.promote_chat_member(
            chat_id,
            message.from_user.id
        )

    db.update_user(message.chat.id, message.from_user.id, message.from_user.username, message.from_user.first_name)
    db.exp(message.chat.id, message.from_user.id)


if __name__ == "__main__":
    DICT_COMMANDS = {
        '–ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ–≤–ª–∞–¥–µ–ª—å—Ü–µ–º': add_owner,
        '–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º': admin_private,
        '–ù–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–µ—Ä–æ–º': moder_private,
        '–ü–æ–Ω–∏–∑–∏—Ç—å': downgrade,
        '–ó–∞–±–∞–Ω–∏—Ç—å –≤ —Å–µ—Ç–∏': add_banned,
        '–ó–∞–±–∞–Ω–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ': ban_group,
        '–†–∞–∑–±–∞–Ω–∏—Ç—å –≤ —Å–µ—Ç–∏': add_banned,
        '–†–∞–∑–±–∞–Ω–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ': ban_group
    }
    executor.start_polling(dp, skip_updates=True)